// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oracle

import (
	context "context"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseDaemonClient is the client API for DatabaseDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseDaemonClient interface {
	// CreateDir RPC call to create a directory named path, along with any
	// necessary parents.
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error)
	// ReadDir RPC call to read the directory named by path and returns Fileinfos
	// for the path and children.
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error)
	// DeleteDir RPC to call remove path.
	DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error)
	// BounceDatabase RPC call to start/stop a database.
	BounceDatabase(ctx context.Context, in *BounceDatabaseRequest, opts ...grpc.CallOption) (*BounceDatabaseResponse, error)
	// BounceListener RPC call to start/stop a listener.
	BounceListener(ctx context.Context, in *BounceListenerRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error)
	// CheckDatabaseState RPC call verifies the database is running.
	CheckDatabaseState(ctx context.Context, in *CheckDatabaseStateRequest, opts ...grpc.CallOption) (*CheckDatabaseStateResponse, error)
	// RunSQLPlus RPC call executes Oracle's sqlplus utility.
	RunSQLPlus(ctx context.Context, in *RunSQLPlusCMDRequest, opts ...grpc.CallOption) (*RunCMDResponse, error)
	// RunSQLPlusFormatted RPC is similar to RunSQLPlus, but for queries.
	RunSQLPlusFormatted(ctx context.Context, in *RunSQLPlusCMDRequest, opts ...grpc.CallOption) (*RunCMDResponse, error)
	// KnownPDBs RPC call returns a list of known PDBs.
	KnownPDBs(ctx context.Context, in *KnownPDBsRequest, opts ...grpc.CallOption) (*KnownPDBsResponse, error)
	// RunRMAN RPC call executes Oracle's rman utility.
	RunRMAN(ctx context.Context, in *RunRMANRequest, opts ...grpc.CallOption) (*RunRMANResponse, error)
	// RunRMANAsync RPC call executes Oracle's rman utility asynchronously.
	RunRMANAsync(ctx context.Context, in *RunRMANAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// NID changes a database id and/or database name.
	NID(ctx context.Context, in *NIDRequest, opts ...grpc.CallOption) (*NIDResponse, error)
	// GetDatabaseType returns database type(eg. ORACLE_12_2_ENTERPRISE_NONCDB)
	GetDatabaseType(ctx context.Context, in *GetDatabaseTypeRequest, opts ...grpc.CallOption) (*GetDatabaseTypeResponse, error)
	// GetDatabaseName returns database name.
	GetDatabaseName(ctx context.Context, in *GetDatabaseNameRequest, opts ...grpc.CallOption) (*GetDatabaseNameResponse, error)
	// CreatePasswordFile creates a password file for the database.
	CreatePasswordFile(ctx context.Context, in *CreatePasswordFileRequest, opts ...grpc.CallOption) (*CreatePasswordFileResponse, error)
	// CreateReplicaInitOraFile creates init.ora file using the template and the
	// provided parameters.
	CreateReplicaInitOraFile(ctx context.Context, in *CreateReplicaInitOraFileRequest, opts ...grpc.CallOption) (*CreateReplicaInitOraFileResponse, error)
	// SetListenerRegistration sets a static listener registration and restarts
	// the listener.
	SetListenerRegistration(ctx context.Context, in *SetListenerRegistrationRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error)
	// BootstrapStandby performs bootstrap tasks that have to be done by dbdaemon.
	BootstrapStandby(ctx context.Context, in *BootstrapStandbyRequest, opts ...grpc.CallOption) (*BootstrapStandbyResponse, error)
	// CreateCDB creates a database instance.
	CreateCDB(ctx context.Context, in *CreateCDBRequest, opts ...grpc.CallOption) (*CreateCDBResponse, error)
	// CreateCDBAsync creates a database instance asynchronously.
	CreateCDBAsync(ctx context.Context, in *CreateCDBAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// CreateListener creates a database listener.
	CreateListener(ctx context.Context, in *CreateListenerRequest, opts ...grpc.CallOption) (*CreateListenerResponse, error)
	// FileExists runs a simple check to confirm whether a requested file
	// exists in a database container or not.
	// An example of where FileExists is used is a check on
	// the provisioning_successful file, but any file (nor a dir) can be
	// checked via this RPC call.
	FileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error)
	// PhysicalRestoreAsync runs RMAN and SQL queries in sequence to restore
	// a database from an RMAN backup.
	PhysicalRestoreAsync(ctx context.Context, in *PhysicalRestoreAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// DataPumpImportAsync imports data from a .dmp file to an existing PDB.
	DataPumpImportAsync(ctx context.Context, in *DataPumpImportAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// DataPumpExportAsync exports data to a .dmp file using expdp
	DataPumpExportAsync(ctx context.Context, in *DataPumpExportAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// ListOperations lists operations that match the specified filter in the
	// request.
	ListOperations(ctx context.Context, in *longrunning.ListOperationsRequest, opts ...grpc.CallOption) (*longrunning.ListOperationsResponse, error)
	// GetOperation gets the latest state of a long-running operation. Clients can
	// use this method to poll the operation result.
	GetOperation(ctx context.Context, in *longrunning.GetOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// DeleteOperation deletes a long-running operation. This method indicates
	// that the client is no longer interested in the operation result. It does
	// not cancel the operation.
	DeleteOperation(ctx context.Context, in *longrunning.DeleteOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RecoverConfigFile creates a binary pfile from the backed up spfile
	RecoverConfigFile(ctx context.Context, in *RecoverConfigFileRequest, opts ...grpc.CallOption) (*RecoverConfigFileResponse, error)
	// DownloadDirectoryFromGCS downloads a directory from GCS bucket to local
	// path.
	DownloadDirectoryFromGCS(ctx context.Context, in *DownloadDirectoryFromGCSRequest, opts ...grpc.CallOption) (*DownloadDirectoryFromGCSResponse, error)
	// FetchServiceImageMetaData returns the service image metadata.
	FetchServiceImageMetaData(ctx context.Context, in *FetchServiceImageMetaDataRequest, opts ...grpc.CallOption) (*FetchServiceImageMetaDataResponse, error)
	// CreateFile creates file based on file path and content.
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	// BootstrapDatabase bootstraps seeded database by executing init_oracle
	BootstrapDatabase(ctx context.Context, in *BootstrapDatabaseRequest, opts ...grpc.CallOption) (*BootstrapDatabaseResponse, error)
}

type databaseDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseDaemonClient(cc grpc.ClientConnInterface) DatabaseDaemonClient {
	return &databaseDaemonClient{cc}
}

func (c *databaseDaemonClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error) {
	out := new(CreateDirResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error) {
	out := new(ReadDirResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/ReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error) {
	out := new(DeleteDirResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/DeleteDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) BounceDatabase(ctx context.Context, in *BounceDatabaseRequest, opts ...grpc.CallOption) (*BounceDatabaseResponse, error) {
	out := new(BounceDatabaseResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/BounceDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) BounceListener(ctx context.Context, in *BounceListenerRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error) {
	out := new(BounceListenerResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/BounceListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CheckDatabaseState(ctx context.Context, in *CheckDatabaseStateRequest, opts ...grpc.CallOption) (*CheckDatabaseStateResponse, error) {
	out := new(CheckDatabaseStateResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CheckDatabaseState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) RunSQLPlus(ctx context.Context, in *RunSQLPlusCMDRequest, opts ...grpc.CallOption) (*RunCMDResponse, error) {
	out := new(RunCMDResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/RunSQLPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) RunSQLPlusFormatted(ctx context.Context, in *RunSQLPlusCMDRequest, opts ...grpc.CallOption) (*RunCMDResponse, error) {
	out := new(RunCMDResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/RunSQLPlusFormatted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) KnownPDBs(ctx context.Context, in *KnownPDBsRequest, opts ...grpc.CallOption) (*KnownPDBsResponse, error) {
	out := new(KnownPDBsResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/KnownPDBs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) RunRMAN(ctx context.Context, in *RunRMANRequest, opts ...grpc.CallOption) (*RunRMANResponse, error) {
	out := new(RunRMANResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/RunRMAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) RunRMANAsync(ctx context.Context, in *RunRMANAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/RunRMANAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) NID(ctx context.Context, in *NIDRequest, opts ...grpc.CallOption) (*NIDResponse, error) {
	out := new(NIDResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/NID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) GetDatabaseType(ctx context.Context, in *GetDatabaseTypeRequest, opts ...grpc.CallOption) (*GetDatabaseTypeResponse, error) {
	out := new(GetDatabaseTypeResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/GetDatabaseType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) GetDatabaseName(ctx context.Context, in *GetDatabaseNameRequest, opts ...grpc.CallOption) (*GetDatabaseNameResponse, error) {
	out := new(GetDatabaseNameResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/GetDatabaseName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreatePasswordFile(ctx context.Context, in *CreatePasswordFileRequest, opts ...grpc.CallOption) (*CreatePasswordFileResponse, error) {
	out := new(CreatePasswordFileResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreatePasswordFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreateReplicaInitOraFile(ctx context.Context, in *CreateReplicaInitOraFileRequest, opts ...grpc.CallOption) (*CreateReplicaInitOraFileResponse, error) {
	out := new(CreateReplicaInitOraFileResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateReplicaInitOraFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) SetListenerRegistration(ctx context.Context, in *SetListenerRegistrationRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error) {
	out := new(BounceListenerResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/SetListenerRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) BootstrapStandby(ctx context.Context, in *BootstrapStandbyRequest, opts ...grpc.CallOption) (*BootstrapStandbyResponse, error) {
	out := new(BootstrapStandbyResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/BootstrapStandby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreateCDB(ctx context.Context, in *CreateCDBRequest, opts ...grpc.CallOption) (*CreateCDBResponse, error) {
	out := new(CreateCDBResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateCDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreateCDBAsync(ctx context.Context, in *CreateCDBAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateCDBAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreateListener(ctx context.Context, in *CreateListenerRequest, opts ...grpc.CallOption) (*CreateListenerResponse, error) {
	out := new(CreateListenerResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) FileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error) {
	out := new(FileExistsResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/FileExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) PhysicalRestoreAsync(ctx context.Context, in *PhysicalRestoreAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/PhysicalRestoreAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) DataPumpImportAsync(ctx context.Context, in *DataPumpImportAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/DataPumpImportAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) DataPumpExportAsync(ctx context.Context, in *DataPumpExportAsyncRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/DataPumpExportAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) ListOperations(ctx context.Context, in *longrunning.ListOperationsRequest, opts ...grpc.CallOption) (*longrunning.ListOperationsResponse, error) {
	out := new(longrunning.ListOperationsResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) GetOperation(ctx context.Context, in *longrunning.GetOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) DeleteOperation(ctx context.Context, in *longrunning.DeleteOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) RecoverConfigFile(ctx context.Context, in *RecoverConfigFileRequest, opts ...grpc.CallOption) (*RecoverConfigFileResponse, error) {
	out := new(RecoverConfigFileResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/RecoverConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) DownloadDirectoryFromGCS(ctx context.Context, in *DownloadDirectoryFromGCSRequest, opts ...grpc.CallOption) (*DownloadDirectoryFromGCSResponse, error) {
	out := new(DownloadDirectoryFromGCSResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/DownloadDirectoryFromGCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) FetchServiceImageMetaData(ctx context.Context, in *FetchServiceImageMetaDataRequest, opts ...grpc.CallOption) (*FetchServiceImageMetaDataResponse, error) {
	out := new(FetchServiceImageMetaDataResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/FetchServiceImageMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonClient) BootstrapDatabase(ctx context.Context, in *BootstrapDatabaseRequest, opts ...grpc.CallOption) (*BootstrapDatabaseResponse, error) {
	out := new(BootstrapDatabaseResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemon/BootstrapDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseDaemonServer is the server API for DatabaseDaemon service.
// All implementations must embed UnimplementedDatabaseDaemonServer
// for forward compatibility
type DatabaseDaemonServer interface {
	// CreateDir RPC call to create a directory named path, along with any
	// necessary parents.
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error)
	// ReadDir RPC call to read the directory named by path and returns Fileinfos
	// for the path and children.
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error)
	// DeleteDir RPC to call remove path.
	DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error)
	// BounceDatabase RPC call to start/stop a database.
	BounceDatabase(context.Context, *BounceDatabaseRequest) (*BounceDatabaseResponse, error)
	// BounceListener RPC call to start/stop a listener.
	BounceListener(context.Context, *BounceListenerRequest) (*BounceListenerResponse, error)
	// CheckDatabaseState RPC call verifies the database is running.
	CheckDatabaseState(context.Context, *CheckDatabaseStateRequest) (*CheckDatabaseStateResponse, error)
	// RunSQLPlus RPC call executes Oracle's sqlplus utility.
	RunSQLPlus(context.Context, *RunSQLPlusCMDRequest) (*RunCMDResponse, error)
	// RunSQLPlusFormatted RPC is similar to RunSQLPlus, but for queries.
	RunSQLPlusFormatted(context.Context, *RunSQLPlusCMDRequest) (*RunCMDResponse, error)
	// KnownPDBs RPC call returns a list of known PDBs.
	KnownPDBs(context.Context, *KnownPDBsRequest) (*KnownPDBsResponse, error)
	// RunRMAN RPC call executes Oracle's rman utility.
	RunRMAN(context.Context, *RunRMANRequest) (*RunRMANResponse, error)
	// RunRMANAsync RPC call executes Oracle's rman utility asynchronously.
	RunRMANAsync(context.Context, *RunRMANAsyncRequest) (*longrunning.Operation, error)
	// NID changes a database id and/or database name.
	NID(context.Context, *NIDRequest) (*NIDResponse, error)
	// GetDatabaseType returns database type(eg. ORACLE_12_2_ENTERPRISE_NONCDB)
	GetDatabaseType(context.Context, *GetDatabaseTypeRequest) (*GetDatabaseTypeResponse, error)
	// GetDatabaseName returns database name.
	GetDatabaseName(context.Context, *GetDatabaseNameRequest) (*GetDatabaseNameResponse, error)
	// CreatePasswordFile creates a password file for the database.
	CreatePasswordFile(context.Context, *CreatePasswordFileRequest) (*CreatePasswordFileResponse, error)
	// CreateReplicaInitOraFile creates init.ora file using the template and the
	// provided parameters.
	CreateReplicaInitOraFile(context.Context, *CreateReplicaInitOraFileRequest) (*CreateReplicaInitOraFileResponse, error)
	// SetListenerRegistration sets a static listener registration and restarts
	// the listener.
	SetListenerRegistration(context.Context, *SetListenerRegistrationRequest) (*BounceListenerResponse, error)
	// BootstrapStandby performs bootstrap tasks that have to be done by dbdaemon.
	BootstrapStandby(context.Context, *BootstrapStandbyRequest) (*BootstrapStandbyResponse, error)
	// CreateCDB creates a database instance.
	CreateCDB(context.Context, *CreateCDBRequest) (*CreateCDBResponse, error)
	// CreateCDBAsync creates a database instance asynchronously.
	CreateCDBAsync(context.Context, *CreateCDBAsyncRequest) (*longrunning.Operation, error)
	// CreateListener creates a database listener.
	CreateListener(context.Context, *CreateListenerRequest) (*CreateListenerResponse, error)
	// FileExists runs a simple check to confirm whether a requested file
	// exists in a database container or not.
	// An example of where FileExists is used is a check on
	// the provisioning_successful file, but any file (nor a dir) can be
	// checked via this RPC call.
	FileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error)
	// PhysicalRestoreAsync runs RMAN and SQL queries in sequence to restore
	// a database from an RMAN backup.
	PhysicalRestoreAsync(context.Context, *PhysicalRestoreAsyncRequest) (*longrunning.Operation, error)
	// DataPumpImportAsync imports data from a .dmp file to an existing PDB.
	DataPumpImportAsync(context.Context, *DataPumpImportAsyncRequest) (*longrunning.Operation, error)
	// DataPumpExportAsync exports data to a .dmp file using expdp
	DataPumpExportAsync(context.Context, *DataPumpExportAsyncRequest) (*longrunning.Operation, error)
	// ListOperations lists operations that match the specified filter in the
	// request.
	ListOperations(context.Context, *longrunning.ListOperationsRequest) (*longrunning.ListOperationsResponse, error)
	// GetOperation gets the latest state of a long-running operation. Clients can
	// use this method to poll the operation result.
	GetOperation(context.Context, *longrunning.GetOperationRequest) (*longrunning.Operation, error)
	// DeleteOperation deletes a long-running operation. This method indicates
	// that the client is no longer interested in the operation result. It does
	// not cancel the operation.
	DeleteOperation(context.Context, *longrunning.DeleteOperationRequest) (*emptypb.Empty, error)
	// RecoverConfigFile creates a binary pfile from the backed up spfile
	RecoverConfigFile(context.Context, *RecoverConfigFileRequest) (*RecoverConfigFileResponse, error)
	// DownloadDirectoryFromGCS downloads a directory from GCS bucket to local
	// path.
	DownloadDirectoryFromGCS(context.Context, *DownloadDirectoryFromGCSRequest) (*DownloadDirectoryFromGCSResponse, error)
	// FetchServiceImageMetaData returns the service image metadata.
	FetchServiceImageMetaData(context.Context, *FetchServiceImageMetaDataRequest) (*FetchServiceImageMetaDataResponse, error)
	// CreateFile creates file based on file path and content.
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	// BootstrapDatabase bootstraps seeded database by executing init_oracle
	BootstrapDatabase(context.Context, *BootstrapDatabaseRequest) (*BootstrapDatabaseResponse, error)
	mustEmbedUnimplementedDatabaseDaemonServer()
}

// UnimplementedDatabaseDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseDaemonServer struct {
}

func (UnimplementedDatabaseDaemonServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedDatabaseDaemonServer) ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedDatabaseDaemonServer) DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedDatabaseDaemonServer) BounceDatabase(context.Context, *BounceDatabaseRequest) (*BounceDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BounceDatabase not implemented")
}
func (UnimplementedDatabaseDaemonServer) BounceListener(context.Context, *BounceListenerRequest) (*BounceListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BounceListener not implemented")
}
func (UnimplementedDatabaseDaemonServer) CheckDatabaseState(context.Context, *CheckDatabaseStateRequest) (*CheckDatabaseStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDatabaseState not implemented")
}
func (UnimplementedDatabaseDaemonServer) RunSQLPlus(context.Context, *RunSQLPlusCMDRequest) (*RunCMDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSQLPlus not implemented")
}
func (UnimplementedDatabaseDaemonServer) RunSQLPlusFormatted(context.Context, *RunSQLPlusCMDRequest) (*RunCMDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSQLPlusFormatted not implemented")
}
func (UnimplementedDatabaseDaemonServer) KnownPDBs(context.Context, *KnownPDBsRequest) (*KnownPDBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnownPDBs not implemented")
}
func (UnimplementedDatabaseDaemonServer) RunRMAN(context.Context, *RunRMANRequest) (*RunRMANResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRMAN not implemented")
}
func (UnimplementedDatabaseDaemonServer) RunRMANAsync(context.Context, *RunRMANAsyncRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRMANAsync not implemented")
}
func (UnimplementedDatabaseDaemonServer) NID(context.Context, *NIDRequest) (*NIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NID not implemented")
}
func (UnimplementedDatabaseDaemonServer) GetDatabaseType(context.Context, *GetDatabaseTypeRequest) (*GetDatabaseTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseType not implemented")
}
func (UnimplementedDatabaseDaemonServer) GetDatabaseName(context.Context, *GetDatabaseNameRequest) (*GetDatabaseNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseName not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreatePasswordFile(context.Context, *CreatePasswordFileRequest) (*CreatePasswordFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordFile not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreateReplicaInitOraFile(context.Context, *CreateReplicaInitOraFileRequest) (*CreateReplicaInitOraFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplicaInitOraFile not implemented")
}
func (UnimplementedDatabaseDaemonServer) SetListenerRegistration(context.Context, *SetListenerRegistrationRequest) (*BounceListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerRegistration not implemented")
}
func (UnimplementedDatabaseDaemonServer) BootstrapStandby(context.Context, *BootstrapStandbyRequest) (*BootstrapStandbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapStandby not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreateCDB(context.Context, *CreateCDBRequest) (*CreateCDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCDB not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreateCDBAsync(context.Context, *CreateCDBAsyncRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCDBAsync not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreateListener(context.Context, *CreateListenerRequest) (*CreateListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListener not implemented")
}
func (UnimplementedDatabaseDaemonServer) FileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileExists not implemented")
}
func (UnimplementedDatabaseDaemonServer) PhysicalRestoreAsync(context.Context, *PhysicalRestoreAsyncRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhysicalRestoreAsync not implemented")
}
func (UnimplementedDatabaseDaemonServer) DataPumpImportAsync(context.Context, *DataPumpImportAsyncRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPumpImportAsync not implemented")
}
func (UnimplementedDatabaseDaemonServer) DataPumpExportAsync(context.Context, *DataPumpExportAsyncRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPumpExportAsync not implemented")
}
func (UnimplementedDatabaseDaemonServer) ListOperations(context.Context, *longrunning.ListOperationsRequest) (*longrunning.ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDatabaseDaemonServer) GetOperation(context.Context, *longrunning.GetOperationRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedDatabaseDaemonServer) DeleteOperation(context.Context, *longrunning.DeleteOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}
func (UnimplementedDatabaseDaemonServer) RecoverConfigFile(context.Context, *RecoverConfigFileRequest) (*RecoverConfigFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverConfigFile not implemented")
}
func (UnimplementedDatabaseDaemonServer) DownloadDirectoryFromGCS(context.Context, *DownloadDirectoryFromGCSRequest) (*DownloadDirectoryFromGCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDirectoryFromGCS not implemented")
}
func (UnimplementedDatabaseDaemonServer) FetchServiceImageMetaData(context.Context, *FetchServiceImageMetaDataRequest) (*FetchServiceImageMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServiceImageMetaData not implemented")
}
func (UnimplementedDatabaseDaemonServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedDatabaseDaemonServer) BootstrapDatabase(context.Context, *BootstrapDatabaseRequest) (*BootstrapDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapDatabase not implemented")
}
func (UnimplementedDatabaseDaemonServer) mustEmbedUnimplementedDatabaseDaemonServer() {}

// UnsafeDatabaseDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseDaemonServer will
// result in compilation errors.
type UnsafeDatabaseDaemonServer interface {
	mustEmbedUnimplementedDatabaseDaemonServer()
}

func RegisterDatabaseDaemonServer(s grpc.ServiceRegistrar, srv DatabaseDaemonServer) {
	s.RegisterService(&DatabaseDaemon_ServiceDesc, srv)
}

func _DatabaseDaemon_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/ReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/DeleteDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).DeleteDir(ctx, req.(*DeleteDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_BounceDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BounceDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).BounceDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/BounceDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).BounceDatabase(ctx, req.(*BounceDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_BounceListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BounceListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).BounceListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/BounceListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).BounceListener(ctx, req.(*BounceListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CheckDatabaseState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDatabaseStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CheckDatabaseState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CheckDatabaseState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CheckDatabaseState(ctx, req.(*CheckDatabaseStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_RunSQLPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSQLPlusCMDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).RunSQLPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/RunSQLPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).RunSQLPlus(ctx, req.(*RunSQLPlusCMDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_RunSQLPlusFormatted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSQLPlusCMDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).RunSQLPlusFormatted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/RunSQLPlusFormatted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).RunSQLPlusFormatted(ctx, req.(*RunSQLPlusCMDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_KnownPDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnownPDBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).KnownPDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/KnownPDBs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).KnownPDBs(ctx, req.(*KnownPDBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_RunRMAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRMANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).RunRMAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/RunRMAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).RunRMAN(ctx, req.(*RunRMANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_RunRMANAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRMANAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).RunRMANAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/RunRMANAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).RunRMANAsync(ctx, req.(*RunRMANAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_NID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).NID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/NID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).NID(ctx, req.(*NIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_GetDatabaseType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).GetDatabaseType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/GetDatabaseType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).GetDatabaseType(ctx, req.(*GetDatabaseTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_GetDatabaseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).GetDatabaseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/GetDatabaseName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).GetDatabaseName(ctx, req.(*GetDatabaseNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreatePasswordFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreatePasswordFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreatePasswordFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreatePasswordFile(ctx, req.(*CreatePasswordFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreateReplicaInitOraFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaInitOraFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateReplicaInitOraFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateReplicaInitOraFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateReplicaInitOraFile(ctx, req.(*CreateReplicaInitOraFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_SetListenerRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).SetListenerRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/SetListenerRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).SetListenerRegistration(ctx, req.(*SetListenerRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_BootstrapStandby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapStandbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).BootstrapStandby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/BootstrapStandby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).BootstrapStandby(ctx, req.(*BootstrapStandbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreateCDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateCDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateCDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateCDB(ctx, req.(*CreateCDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreateCDBAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCDBAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateCDBAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateCDBAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateCDBAsync(ctx, req.(*CreateCDBAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreateListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateListener(ctx, req.(*CreateListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_FileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).FileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/FileExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).FileExists(ctx, req.(*FileExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_PhysicalRestoreAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhysicalRestoreAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).PhysicalRestoreAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/PhysicalRestoreAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).PhysicalRestoreAsync(ctx, req.(*PhysicalRestoreAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_DataPumpImportAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPumpImportAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).DataPumpImportAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/DataPumpImportAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).DataPumpImportAsync(ctx, req.(*DataPumpImportAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_DataPumpExportAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPumpExportAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).DataPumpExportAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/DataPumpExportAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).DataPumpExportAsync(ctx, req.(*DataPumpExportAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunning.ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).ListOperations(ctx, req.(*longrunning.ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunning.GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).GetOperation(ctx, req.(*longrunning.GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunning.DeleteOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).DeleteOperation(ctx, req.(*longrunning.DeleteOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_RecoverConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).RecoverConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/RecoverConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).RecoverConfigFile(ctx, req.(*RecoverConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_DownloadDirectoryFromGCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDirectoryFromGCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).DownloadDirectoryFromGCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/DownloadDirectoryFromGCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).DownloadDirectoryFromGCS(ctx, req.(*DownloadDirectoryFromGCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_FetchServiceImageMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchServiceImageMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).FetchServiceImageMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/FetchServiceImageMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).FetchServiceImageMetaData(ctx, req.(*FetchServiceImageMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemon_BootstrapDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonServer).BootstrapDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemon/BootstrapDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonServer).BootstrapDatabase(ctx, req.(*BootstrapDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseDaemon_ServiceDesc is the grpc.ServiceDesc for DatabaseDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agents.oracle.DatabaseDaemon",
	HandlerType: (*DatabaseDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _DatabaseDaemon_CreateDir_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _DatabaseDaemon_ReadDir_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _DatabaseDaemon_DeleteDir_Handler,
		},
		{
			MethodName: "BounceDatabase",
			Handler:    _DatabaseDaemon_BounceDatabase_Handler,
		},
		{
			MethodName: "BounceListener",
			Handler:    _DatabaseDaemon_BounceListener_Handler,
		},
		{
			MethodName: "CheckDatabaseState",
			Handler:    _DatabaseDaemon_CheckDatabaseState_Handler,
		},
		{
			MethodName: "RunSQLPlus",
			Handler:    _DatabaseDaemon_RunSQLPlus_Handler,
		},
		{
			MethodName: "RunSQLPlusFormatted",
			Handler:    _DatabaseDaemon_RunSQLPlusFormatted_Handler,
		},
		{
			MethodName: "KnownPDBs",
			Handler:    _DatabaseDaemon_KnownPDBs_Handler,
		},
		{
			MethodName: "RunRMAN",
			Handler:    _DatabaseDaemon_RunRMAN_Handler,
		},
		{
			MethodName: "RunRMANAsync",
			Handler:    _DatabaseDaemon_RunRMANAsync_Handler,
		},
		{
			MethodName: "NID",
			Handler:    _DatabaseDaemon_NID_Handler,
		},
		{
			MethodName: "GetDatabaseType",
			Handler:    _DatabaseDaemon_GetDatabaseType_Handler,
		},
		{
			MethodName: "GetDatabaseName",
			Handler:    _DatabaseDaemon_GetDatabaseName_Handler,
		},
		{
			MethodName: "CreatePasswordFile",
			Handler:    _DatabaseDaemon_CreatePasswordFile_Handler,
		},
		{
			MethodName: "CreateReplicaInitOraFile",
			Handler:    _DatabaseDaemon_CreateReplicaInitOraFile_Handler,
		},
		{
			MethodName: "SetListenerRegistration",
			Handler:    _DatabaseDaemon_SetListenerRegistration_Handler,
		},
		{
			MethodName: "BootstrapStandby",
			Handler:    _DatabaseDaemon_BootstrapStandby_Handler,
		},
		{
			MethodName: "CreateCDB",
			Handler:    _DatabaseDaemon_CreateCDB_Handler,
		},
		{
			MethodName: "CreateCDBAsync",
			Handler:    _DatabaseDaemon_CreateCDBAsync_Handler,
		},
		{
			MethodName: "CreateListener",
			Handler:    _DatabaseDaemon_CreateListener_Handler,
		},
		{
			MethodName: "FileExists",
			Handler:    _DatabaseDaemon_FileExists_Handler,
		},
		{
			MethodName: "PhysicalRestoreAsync",
			Handler:    _DatabaseDaemon_PhysicalRestoreAsync_Handler,
		},
		{
			MethodName: "DataPumpImportAsync",
			Handler:    _DatabaseDaemon_DataPumpImportAsync_Handler,
		},
		{
			MethodName: "DataPumpExportAsync",
			Handler:    _DatabaseDaemon_DataPumpExportAsync_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DatabaseDaemon_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _DatabaseDaemon_GetOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _DatabaseDaemon_DeleteOperation_Handler,
		},
		{
			MethodName: "RecoverConfigFile",
			Handler:    _DatabaseDaemon_RecoverConfigFile_Handler,
		},
		{
			MethodName: "DownloadDirectoryFromGCS",
			Handler:    _DatabaseDaemon_DownloadDirectoryFromGCS_Handler,
		},
		{
			MethodName: "FetchServiceImageMetaData",
			Handler:    _DatabaseDaemon_FetchServiceImageMetaData_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _DatabaseDaemon_CreateFile_Handler,
		},
		{
			MethodName: "BootstrapDatabase",
			Handler:    _DatabaseDaemon_BootstrapDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/pkg/agents/oracle/dbdaemon.proto",
}
