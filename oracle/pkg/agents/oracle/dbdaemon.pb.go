// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Database Daemon is used for privileged database ops, e.g.
// run sqlplus rman. It is intended to be used by the agents running on the
// database sidecar container(via *nix domain socket protocol).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: oracle/pkg/agents/oracle/dbdaemon.proto

package oracle

import (
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDatabaseTypeResponse_DatabaseType int32

const (
	GetDatabaseTypeResponse_UNKNOWN_DATABASE_TYPE         GetDatabaseTypeResponse_DatabaseType = 0
	GetDatabaseTypeResponse_ORACLE_12_2_ENTERPRISE        GetDatabaseTypeResponse_DatabaseType = 1
	GetDatabaseTypeResponse_ORACLE_12_2_ENTERPRISE_NONCDB GetDatabaseTypeResponse_DatabaseType = 2
)

// Enum value maps for GetDatabaseTypeResponse_DatabaseType.
var (
	GetDatabaseTypeResponse_DatabaseType_name = map[int32]string{
		0: "UNKNOWN_DATABASE_TYPE",
		1: "ORACLE_12_2_ENTERPRISE",
		2: "ORACLE_12_2_ENTERPRISE_NONCDB",
	}
	GetDatabaseTypeResponse_DatabaseType_value = map[string]int32{
		"UNKNOWN_DATABASE_TYPE":         0,
		"ORACLE_12_2_ENTERPRISE":        1,
		"ORACLE_12_2_ENTERPRISE_NONCDB": 2,
	}
)

func (x GetDatabaseTypeResponse_DatabaseType) Enum() *GetDatabaseTypeResponse_DatabaseType {
	p := new(GetDatabaseTypeResponse_DatabaseType)
	*p = x
	return p
}

func (x GetDatabaseTypeResponse_DatabaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDatabaseTypeResponse_DatabaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_enumTypes[0].Descriptor()
}

func (GetDatabaseTypeResponse_DatabaseType) Type() protoreflect.EnumType {
	return &file_oracle_pkg_agents_oracle_dbdaemon_proto_enumTypes[0]
}

func (x GetDatabaseTypeResponse_DatabaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDatabaseTypeResponse_DatabaseType.Descriptor instead.
func (GetDatabaseTypeResponse_DatabaseType) EnumDescriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{24, 0}
}

type CreateDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is a directory name.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// perm is the permission bits perm (before umask) are used for all
	// directories CreateDir creates.
	Perm uint32 `protobuf:"varint,2,opt,name=perm,proto3" json:"perm,omitempty"`
}

func (x *CreateDirRequest) Reset() {
	*x = CreateDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirRequest) ProtoMessage() {}

func (x *CreateDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirRequest.ProtoReflect.Descriptor instead.
func (*CreateDirRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateDirRequest) GetPerm() uint32 {
	if x != nil {
		return x.Perm
	}
	return 0
}

type CreateDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDirResponse) Reset() {
	*x = CreateDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirResponse) ProtoMessage() {}

func (x *CreateDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirResponse.ProtoReflect.Descriptor instead.
func (*CreateDirResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{1}
}

type ReadDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is a directory name.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// set recursive to true if collect all files and directories metadata in the
	// file tree rooted at path. set recursive to false if only collect the first
	// level files and directories metadata.
	Recursive bool `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *ReadDirRequest) Reset() {
	*x = ReadDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirRequest) ProtoMessage() {}

func (x *ReadDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirRequest.ProtoReflect.Descriptor instead.
func (*ReadDirRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{2}
}

func (x *ReadDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadDirRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type ReadDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrPath *ReadDirResponse_FileInfo   `protobuf:"bytes,1,opt,name=currPath,proto3" json:"currPath,omitempty"`
	SubPaths []*ReadDirResponse_FileInfo `protobuf:"bytes,2,rep,name=subPaths,proto3" json:"subPaths,omitempty"`
}

func (x *ReadDirResponse) Reset() {
	*x = ReadDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse) ProtoMessage() {}

func (x *ReadDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse.ProtoReflect.Descriptor instead.
func (*ReadDirResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{3}
}

func (x *ReadDirResponse) GetCurrPath() *ReadDirResponse_FileInfo {
	if x != nil {
		return x.CurrPath
	}
	return nil
}

func (x *ReadDirResponse) GetSubPaths() []*ReadDirResponse_FileInfo {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

type DeleteDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is a directory name to be deleted.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// set force to false if removes a file or (empty) directory
	// DeleteDir removes path and any children it contains if force set to true
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteDirRequest) Reset() {
	*x = DeleteDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDirRequest) ProtoMessage() {}

func (x *DeleteDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDirRequest.ProtoReflect.Descriptor instead.
func (*DeleteDirRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteDirRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDirResponse) Reset() {
	*x = DeleteDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDirResponse) ProtoMessage() {}

func (x *DeleteDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDirResponse.ProtoReflect.Descriptor instead.
func (*DeleteDirResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{5}
}

type RunCMDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg []string `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RunCMDResponse) Reset() {
	*x = RunCMDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCMDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCMDResponse) ProtoMessage() {}

func (x *RunCMDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCMDResponse.ProtoReflect.Descriptor instead.
func (*RunCMDResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{6}
}

func (x *RunCMDResponse) GetMsg() []string {
	if x != nil {
		return x.Msg
	}
	return nil
}

type LocalConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalConnection) Reset() {
	*x = LocalConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalConnection) ProtoMessage() {}

func (x *LocalConnection) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalConnection.ProtoReflect.Descriptor instead.
func (*LocalConnection) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{7}
}

type RunSQLPlusCMDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	// Optional TnsAdmin location for custom sql env settings.
	TnsAdmin string `protobuf:"bytes,2,opt,name=tns_admin,json=tnsAdmin,proto3" json:"tns_admin,omitempty"`
	Suppress bool   `protobuf:"varint,3,opt,name=suppress,proto3" json:"suppress,omitempty"`
	// Connection target.
	//
	// Types that are assignable to ConnectInfo:
	//	*RunSQLPlusCMDRequest_Local
	//	*RunSQLPlusCMDRequest_Dsn
	//	*RunSQLPlusCMDRequest_DatabaseName
	ConnectInfo isRunSQLPlusCMDRequest_ConnectInfo `protobuf_oneof:"connectInfo"`
	// Quiet mode, suppress all output.
	Quiet bool `protobuf:"varint,7,opt,name=quiet,proto3" json:"quiet,omitempty"`
}

func (x *RunSQLPlusCMDRequest) Reset() {
	*x = RunSQLPlusCMDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSQLPlusCMDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSQLPlusCMDRequest) ProtoMessage() {}

func (x *RunSQLPlusCMDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSQLPlusCMDRequest.ProtoReflect.Descriptor instead.
func (*RunSQLPlusCMDRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{8}
}

func (x *RunSQLPlusCMDRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RunSQLPlusCMDRequest) GetTnsAdmin() string {
	if x != nil {
		return x.TnsAdmin
	}
	return ""
}

func (x *RunSQLPlusCMDRequest) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

func (m *RunSQLPlusCMDRequest) GetConnectInfo() isRunSQLPlusCMDRequest_ConnectInfo {
	if m != nil {
		return m.ConnectInfo
	}
	return nil
}

func (x *RunSQLPlusCMDRequest) GetLocal() *LocalConnection {
	if x, ok := x.GetConnectInfo().(*RunSQLPlusCMDRequest_Local); ok {
		return x.Local
	}
	return nil
}

func (x *RunSQLPlusCMDRequest) GetDsn() string {
	if x, ok := x.GetConnectInfo().(*RunSQLPlusCMDRequest_Dsn); ok {
		return x.Dsn
	}
	return ""
}

func (x *RunSQLPlusCMDRequest) GetDatabaseName() string {
	if x, ok := x.GetConnectInfo().(*RunSQLPlusCMDRequest_DatabaseName); ok {
		return x.DatabaseName
	}
	return ""
}

func (x *RunSQLPlusCMDRequest) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

type isRunSQLPlusCMDRequest_ConnectInfo interface {
	isRunSQLPlusCMDRequest_ConnectInfo()
}

type RunSQLPlusCMDRequest_Local struct {
	// Connect to local database.
	Local *LocalConnection `protobuf:"bytes,4,opt,name=local,proto3,oneof"`
}

type RunSQLPlusCMDRequest_Dsn struct {
	// dsn string used to connect to an external database. This is to support
	// connecting to an external server from the DB container. Formats
	// supported are listed here
	// https://github.com/godror/godror/blob/main/README.md#connect
	Dsn string `protobuf:"bytes,5,opt,name=dsn,proto3,oneof"`
}

type RunSQLPlusCMDRequest_DatabaseName struct {
	// Connect to local by non-local database.
	// Explicitly sets the ORACLE_SID. This is required to
	// to support an ES replica.
	DatabaseName string `protobuf:"bytes,6,opt,name=database_name,json=databaseName,proto3,oneof"`
}

func (*RunSQLPlusCMDRequest_Local) isRunSQLPlusCMDRequest_ConnectInfo() {}

func (*RunSQLPlusCMDRequest_Dsn) isRunSQLPlusCMDRequest_ConnectInfo() {}

func (*RunSQLPlusCMDRequest_DatabaseName) isRunSQLPlusCMDRequest_ConnectInfo() {}

type CheckDatabaseStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	IsCdb        bool   `protobuf:"varint,2,opt,name=is_cdb,json=isCdb,proto3" json:"is_cdb,omitempty"`
	DbDomain     string `protobuf:"bytes,3,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
}

func (x *CheckDatabaseStateRequest) Reset() {
	*x = CheckDatabaseStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDatabaseStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDatabaseStateRequest) ProtoMessage() {}

func (x *CheckDatabaseStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDatabaseStateRequest.ProtoReflect.Descriptor instead.
func (*CheckDatabaseStateRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{9}
}

func (x *CheckDatabaseStateRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CheckDatabaseStateRequest) GetIsCdb() bool {
	if x != nil {
		return x.IsCdb
	}
	return false
}

func (x *CheckDatabaseStateRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

type CheckDatabaseStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckDatabaseStateResponse) Reset() {
	*x = CheckDatabaseStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDatabaseStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDatabaseStateResponse) ProtoMessage() {}

func (x *CheckDatabaseStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDatabaseStateResponse.ProtoReflect.Descriptor instead.
func (*CheckDatabaseStateResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{10}
}

type CreatePasswordFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	SysPassword  string `protobuf:"bytes,2,opt,name=sys_password,json=sysPassword,proto3" json:"sys_password,omitempty"`
	Dir          string `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (x *CreatePasswordFileRequest) Reset() {
	*x = CreatePasswordFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePasswordFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePasswordFileRequest) ProtoMessage() {}

func (x *CreatePasswordFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePasswordFileRequest.ProtoReflect.Descriptor instead.
func (*CreatePasswordFileRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{11}
}

func (x *CreatePasswordFileRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreatePasswordFileRequest) GetSysPassword() string {
	if x != nil {
		return x.SysPassword
	}
	return ""
}

func (x *CreatePasswordFileRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

type CreatePasswordFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePasswordFileResponse) Reset() {
	*x = CreatePasswordFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePasswordFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePasswordFileResponse) ProtoMessage() {}

func (x *CreatePasswordFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePasswordFileResponse.ProtoReflect.Descriptor instead.
func (*CreatePasswordFileResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{12}
}

type CreateReplicaInitOraFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmHost          string `protobuf:"bytes,1,opt,name=em_host,json=emHost,proto3" json:"em_host,omitempty"`
	EmPort          int32  `protobuf:"varint,2,opt,name=em_port,json=emPort,proto3" json:"em_port,omitempty"`
	EmDbName        string `protobuf:"bytes,3,opt,name=em_db_name,json=emDbName,proto3" json:"em_db_name,omitempty"`
	EmDbUniqueName  string `protobuf:"bytes,4,opt,name=em_db_unique_name,json=emDbUniqueName,proto3" json:"em_db_unique_name,omitempty"`
	EmDbDomain      string `protobuf:"bytes,5,opt,name=em_db_domain,json=emDbDomain,proto3" json:"em_db_domain,omitempty"`
	LogFileDirList  string `protobuf:"bytes,6,opt,name=log_file_dir_list,json=logFileDirList,proto3" json:"log_file_dir_list,omitempty"`
	DataFileDirList string `protobuf:"bytes,7,opt,name=data_file_dir_list,json=dataFileDirList,proto3" json:"data_file_dir_list,omitempty"`
	EmCompatibility string `protobuf:"bytes,8,opt,name=em_compatibility,json=emCompatibility,proto3" json:"em_compatibility,omitempty"`
	InitOraDir      string `protobuf:"bytes,9,opt,name=init_ora_dir,json=initOraDir,proto3" json:"init_ora_dir,omitempty"`
	InitOraFileName string `protobuf:"bytes,10,opt,name=init_ora_file_name,json=initOraFileName,proto3" json:"init_ora_file_name,omitempty"`
}

func (x *CreateReplicaInitOraFileRequest) Reset() {
	*x = CreateReplicaInitOraFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaInitOraFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaInitOraFileRequest) ProtoMessage() {}

func (x *CreateReplicaInitOraFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaInitOraFileRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaInitOraFileRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{13}
}

func (x *CreateReplicaInitOraFileRequest) GetEmHost() string {
	if x != nil {
		return x.EmHost
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetEmPort() int32 {
	if x != nil {
		return x.EmPort
	}
	return 0
}

func (x *CreateReplicaInitOraFileRequest) GetEmDbName() string {
	if x != nil {
		return x.EmDbName
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetEmDbUniqueName() string {
	if x != nil {
		return x.EmDbUniqueName
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetEmDbDomain() string {
	if x != nil {
		return x.EmDbDomain
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetLogFileDirList() string {
	if x != nil {
		return x.LogFileDirList
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetDataFileDirList() string {
	if x != nil {
		return x.DataFileDirList
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetEmCompatibility() string {
	if x != nil {
		return x.EmCompatibility
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetInitOraDir() string {
	if x != nil {
		return x.InitOraDir
	}
	return ""
}

func (x *CreateReplicaInitOraFileRequest) GetInitOraFileName() string {
	if x != nil {
		return x.InitOraFileName
	}
	return ""
}

type CreateReplicaInitOraFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitOraFileContent string `protobuf:"bytes,1,opt,name=init_ora_file_content,json=initOraFileContent,proto3" json:"init_ora_file_content,omitempty"`
}

func (x *CreateReplicaInitOraFileResponse) Reset() {
	*x = CreateReplicaInitOraFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaInitOraFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaInitOraFileResponse) ProtoMessage() {}

func (x *CreateReplicaInitOraFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaInitOraFileResponse.ProtoReflect.Descriptor instead.
func (*CreateReplicaInitOraFileResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{14}
}

func (x *CreateReplicaInitOraFileResponse) GetInitOraFileContent() string {
	if x != nil {
		return x.InitOraFileContent
	}
	return ""
}

// KnownPDBsRequest is a message used for getting
// a list of known PDBs in a CDB.
type KnownPDBsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// By default a SEED PDB is not included, but a caller can override it here.
	IncludeSeed bool `protobuf:"varint,1,opt,name=include_seed,json=includeSeed,proto3" json:"include_seed,omitempty"`
	// By default a state of a PDB is ignored, but a caller may request a list
	// of PDBs only in the OPEN state (as opposed to just MOUNTED).
	OnlyOpen bool `protobuf:"varint,2,opt,name=only_open,json=onlyOpen,proto3" json:"only_open,omitempty"`
}

func (x *KnownPDBsRequest) Reset() {
	*x = KnownPDBsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnownPDBsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnownPDBsRequest) ProtoMessage() {}

func (x *KnownPDBsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnownPDBsRequest.ProtoReflect.Descriptor instead.
func (*KnownPDBsRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{15}
}

func (x *KnownPDBsRequest) GetIncludeSeed() bool {
	if x != nil {
		return x.IncludeSeed
	}
	return false
}

func (x *KnownPDBsRequest) GetOnlyOpen() bool {
	if x != nil {
		return x.OnlyOpen
	}
	return false
}

// KnownPDBsResponse is a message returning a list of known PDBs.
type KnownPDBsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnownPdbs []string `protobuf:"bytes,1,rep,name=known_pdbs,json=knownPdbs,proto3" json:"known_pdbs,omitempty"`
}

func (x *KnownPDBsResponse) Reset() {
	*x = KnownPDBsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnownPDBsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnownPDBsResponse) ProtoMessage() {}

func (x *KnownPDBsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnownPDBsResponse.ProtoReflect.Descriptor instead.
func (*KnownPDBsResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{16}
}

func (x *KnownPDBsResponse) GetKnownPdbs() []string {
	if x != nil {
		return x.KnownPdbs
	}
	return nil
}

type RunRMANRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scripts to be executed by RMAN in sequence.
	Scripts []string `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
	// sets TNS_ADMIN to override location for network configuration.
	TnsAdmin string `protobuf:"bytes,2,opt,name=tns_admin,json=tnsAdmin,proto3" json:"tns_admin,omitempty"`
	Suppress bool   `protobuf:"varint,3,opt,name=suppress,proto3" json:"suppress,omitempty"`
	// target is the primary database to connect to. This is usually
	// the source database in clone operations. This would be the
	// ES primary for the ES setup.
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// auxiliary is the secondary database to connect to.
	// this is the ES replica database in the ES setup
	Auxiliary string `protobuf:"bytes,5,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`
	// gcs_path is the destination gcs bucket for the backup
	GcsPath string `protobuf:"bytes,6,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	// local_path is the destination directory for the backup
	LocalPath string `protobuf:"bytes,7,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	// rman command to run, currently support backup and restore
	Cmd string `protobuf:"bytes,8,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *RunRMANRequest) Reset() {
	*x = RunRMANRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRMANRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRMANRequest) ProtoMessage() {}

func (x *RunRMANRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRMANRequest.ProtoReflect.Descriptor instead.
func (*RunRMANRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{17}
}

func (x *RunRMANRequest) GetScripts() []string {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *RunRMANRequest) GetTnsAdmin() string {
	if x != nil {
		return x.TnsAdmin
	}
	return ""
}

func (x *RunRMANRequest) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

func (x *RunRMANRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RunRMANRequest) GetAuxiliary() string {
	if x != nil {
		return x.Auxiliary
	}
	return ""
}

func (x *RunRMANRequest) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *RunRMANRequest) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *RunRMANRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

// LROInput is a common part of input requests for all Async operations.
type LROInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional identifier of requested operation.
	// If not provided a random id will be generated.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *LROInput) Reset() {
	*x = LROInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LROInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LROInput) ProtoMessage() {}

func (x *LROInput) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LROInput.ProtoReflect.Descriptor instead.
func (*LROInput) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{18}
}

func (x *LROInput) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type RunRMANAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequest *RunRMANRequest `protobuf:"bytes,1,opt,name=sync_request,json=syncRequest,proto3" json:"sync_request,omitempty"`
	LroInput    *LROInput       `protobuf:"bytes,2,opt,name=lro_input,json=lroInput,proto3" json:"lro_input,omitempty"`
}

func (x *RunRMANAsyncRequest) Reset() {
	*x = RunRMANAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRMANAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRMANAsyncRequest) ProtoMessage() {}

func (x *RunRMANAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRMANAsyncRequest.ProtoReflect.Descriptor instead.
func (*RunRMANAsyncRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{19}
}

func (x *RunRMANAsyncRequest) GetSyncRequest() *RunRMANRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *RunRMANAsyncRequest) GetLroInput() *LROInput {
	if x != nil {
		return x.LroInput
	}
	return nil
}

type RunRMANResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output of each script executed by RMAN.
	Output []string `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *RunRMANResponse) Reset() {
	*x = RunRMANResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRMANResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRMANResponse) ProtoMessage() {}

func (x *RunRMANResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRMANResponse.ProtoReflect.Descriptor instead.
func (*RunRMANResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{20}
}

func (x *RunRMANResponse) GetOutput() []string {
	if x != nil {
		return x.Output
	}
	return nil
}

type NIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ORACLE_SID env value
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// Optional new database name if rename of database is also required.
	DatabaseName string `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *NIDRequest) Reset() {
	*x = NIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NIDRequest) ProtoMessage() {}

func (x *NIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NIDRequest.ProtoReflect.Descriptor instead.
func (*NIDRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{21}
}

func (x *NIDRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *NIDRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type NIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NIDResponse) Reset() {
	*x = NIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NIDResponse) ProtoMessage() {}

func (x *NIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NIDResponse.ProtoReflect.Descriptor instead.
func (*NIDResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{22}
}

type GetDatabaseTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDatabaseTypeRequest) Reset() {
	*x = GetDatabaseTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatabaseTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseTypeRequest) ProtoMessage() {}

func (x *GetDatabaseTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseTypeRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseTypeRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{23}
}

type GetDatabaseTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseType GetDatabaseTypeResponse_DatabaseType `protobuf:"varint,1,opt,name=database_type,json=databaseType,proto3,enum=agents.oracle.GetDatabaseTypeResponse_DatabaseType" json:"database_type,omitempty"`
}

func (x *GetDatabaseTypeResponse) Reset() {
	*x = GetDatabaseTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatabaseTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseTypeResponse) ProtoMessage() {}

func (x *GetDatabaseTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseTypeResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseTypeResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{24}
}

func (x *GetDatabaseTypeResponse) GetDatabaseType() GetDatabaseTypeResponse_DatabaseType {
	if x != nil {
		return x.DatabaseType
	}
	return GetDatabaseTypeResponse_UNKNOWN_DATABASE_TYPE
}

type GetDatabaseNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDatabaseNameRequest) Reset() {
	*x = GetDatabaseNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatabaseNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseNameRequest) ProtoMessage() {}

func (x *GetDatabaseNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseNameRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseNameRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{25}
}

type GetDatabaseNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *GetDatabaseNameResponse) Reset() {
	*x = GetDatabaseNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatabaseNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseNameResponse) ProtoMessage() {}

func (x *GetDatabaseNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseNameResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseNameResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{26}
}

func (x *GetDatabaseNameResponse) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type SetListenerRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// global_database_name is the name of the database
	// unique name with domain name.
	GlobalDatabaseName string `protobuf:"bytes,1,opt,name=global_database_name,json=globalDatabaseName,proto3" json:"global_database_name,omitempty"`
	// database_name is the name of the database. This is same
	// between ES primary and replica
	DatabaseName string `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *SetListenerRegistrationRequest) Reset() {
	*x = SetListenerRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetListenerRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerRegistrationRequest) ProtoMessage() {}

func (x *SetListenerRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerRegistrationRequest.ProtoReflect.Descriptor instead.
func (*SetListenerRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{27}
}

func (x *SetListenerRegistrationRequest) GetGlobalDatabaseName() string {
	if x != nil {
		return x.GlobalDatabaseName
	}
	return ""
}

func (x *SetListenerRegistrationRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type BootstrapStandbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdbName string `protobuf:"bytes,1,opt,name=cdb_name,json=cdbName,proto3" json:"cdb_name,omitempty"`
}

func (x *BootstrapStandbyRequest) Reset() {
	*x = BootstrapStandbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapStandbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStandbyRequest) ProtoMessage() {}

func (x *BootstrapStandbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStandbyRequest.ProtoReflect.Descriptor instead.
func (*BootstrapStandbyRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{28}
}

func (x *BootstrapStandbyRequest) GetCdbName() string {
	if x != nil {
		return x.CdbName
	}
	return ""
}

type BootstrapStandbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BootstrapStandbyResponse) Reset() {
	*x = BootstrapStandbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapStandbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStandbyResponse) ProtoMessage() {}

func (x *BootstrapStandbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStandbyResponse.ProtoReflect.Descriptor instead.
func (*BootstrapStandbyResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{29}
}

type CreateCDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OracleHome       string   `protobuf:"bytes,1,opt,name=oracle_home,json=oracleHome,proto3" json:"oracle_home,omitempty"`
	DatabaseName     string   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DbUniqueName     string   `protobuf:"bytes,3,opt,name=db_unique_name,json=dbUniqueName,proto3" json:"db_unique_name,omitempty"`
	CharacterSet     string   `protobuf:"bytes,4,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	MemoryPercent    int32    `protobuf:"varint,5,opt,name=memory_percent,json=memoryPercent,proto3" json:"memory_percent,omitempty"`
	AdditionalParams []string `protobuf:"bytes,6,rep,name=additional_params,json=additionalParams,proto3" json:"additional_params,omitempty"`
	Version          string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	DbDomain         string   `protobuf:"bytes,8,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
}

func (x *CreateCDBRequest) Reset() {
	*x = CreateCDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDBRequest) ProtoMessage() {}

func (x *CreateCDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDBRequest.ProtoReflect.Descriptor instead.
func (*CreateCDBRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{30}
}

func (x *CreateCDBRequest) GetOracleHome() string {
	if x != nil {
		return x.OracleHome
	}
	return ""
}

func (x *CreateCDBRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreateCDBRequest) GetDbUniqueName() string {
	if x != nil {
		return x.DbUniqueName
	}
	return ""
}

func (x *CreateCDBRequest) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *CreateCDBRequest) GetMemoryPercent() int32 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *CreateCDBRequest) GetAdditionalParams() []string {
	if x != nil {
		return x.AdditionalParams
	}
	return nil
}

func (x *CreateCDBRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateCDBRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

type CreateCDBAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequest *CreateCDBRequest `protobuf:"bytes,1,opt,name=sync_request,json=syncRequest,proto3" json:"sync_request,omitempty"`
	LroInput    *LROInput         `protobuf:"bytes,2,opt,name=lro_input,json=lroInput,proto3" json:"lro_input,omitempty"`
}

func (x *CreateCDBAsyncRequest) Reset() {
	*x = CreateCDBAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDBAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDBAsyncRequest) ProtoMessage() {}

func (x *CreateCDBAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDBAsyncRequest.ProtoReflect.Descriptor instead.
func (*CreateCDBAsyncRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{31}
}

func (x *CreateCDBAsyncRequest) GetSyncRequest() *CreateCDBRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *CreateCDBAsyncRequest) GetLroInput() *LROInput {
	if x != nil {
		return x.LroInput
	}
	return nil
}

type CreateCDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCDBResponse) Reset() {
	*x = CreateCDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDBResponse) ProtoMessage() {}

func (x *CreateCDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDBResponse.ProtoReflect.Descriptor instead.
func (*CreateCDBResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{32}
}

type CreateListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Port         int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol     string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	OracleHome   string `protobuf:"bytes,4,opt,name=oracle_home,json=oracleHome,proto3" json:"oracle_home,omitempty"`
	DbDomain     string `protobuf:"bytes,5,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
}

func (x *CreateListenerRequest) Reset() {
	*x = CreateListenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateListenerRequest) ProtoMessage() {}

func (x *CreateListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateListenerRequest.ProtoReflect.Descriptor instead.
func (*CreateListenerRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{33}
}

func (x *CreateListenerRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreateListenerRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CreateListenerRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *CreateListenerRequest) GetOracleHome() string {
	if x != nil {
		return x.OracleHome
	}
	return ""
}

func (x *CreateListenerRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

type CreateListenerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateListenerResponse) Reset() {
	*x = CreateListenerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateListenerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateListenerResponse) ProtoMessage() {}

func (x *CreateListenerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateListenerResponse.ProtoReflect.Descriptor instead.
func (*CreateListenerResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{34}
}

type FileExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FileExistsRequest) Reset() {
	*x = FileExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileExistsRequest) ProtoMessage() {}

func (x *FileExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileExistsRequest.ProtoReflect.Descriptor instead.
func (*FileExistsRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{35}
}

func (x *FileExistsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FileExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *FileExistsResponse) Reset() {
	*x = FileExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileExistsResponse) ProtoMessage() {}

func (x *FileExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileExistsResponse.ProtoReflect.Descriptor instead.
func (*FileExistsResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{36}
}

func (x *FileExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type PhysicalRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestoreStatement          string `protobuf:"bytes,1,opt,name=restore_statement,json=restoreStatement,proto3" json:"restore_statement,omitempty"`
	LatestRecoverableScnQuery string `protobuf:"bytes,2,opt,name=latest_recoverable_scn_query,json=latestRecoverableScnQuery,proto3" json:"latest_recoverable_scn_query,omitempty"`
	RecoverStatementTemplate  string `protobuf:"bytes,3,opt,name=recover_statement_template,json=recoverStatementTemplate,proto3" json:"recover_statement_template,omitempty"`
}

func (x *PhysicalRestoreRequest) Reset() {
	*x = PhysicalRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalRestoreRequest) ProtoMessage() {}

func (x *PhysicalRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalRestoreRequest.ProtoReflect.Descriptor instead.
func (*PhysicalRestoreRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{37}
}

func (x *PhysicalRestoreRequest) GetRestoreStatement() string {
	if x != nil {
		return x.RestoreStatement
	}
	return ""
}

func (x *PhysicalRestoreRequest) GetLatestRecoverableScnQuery() string {
	if x != nil {
		return x.LatestRecoverableScnQuery
	}
	return ""
}

func (x *PhysicalRestoreRequest) GetRecoverStatementTemplate() string {
	if x != nil {
		return x.RecoverStatementTemplate
	}
	return ""
}

type PhysicalRestoreAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequest *PhysicalRestoreRequest `protobuf:"bytes,1,opt,name=sync_request,json=syncRequest,proto3" json:"sync_request,omitempty"`
	LroInput    *LROInput               `protobuf:"bytes,2,opt,name=lro_input,json=lroInput,proto3" json:"lro_input,omitempty"`
}

func (x *PhysicalRestoreAsyncRequest) Reset() {
	*x = PhysicalRestoreAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalRestoreAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalRestoreAsyncRequest) ProtoMessage() {}

func (x *PhysicalRestoreAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalRestoreAsyncRequest.ProtoReflect.Descriptor instead.
func (*PhysicalRestoreAsyncRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{38}
}

func (x *PhysicalRestoreAsyncRequest) GetSyncRequest() *PhysicalRestoreRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *PhysicalRestoreAsyncRequest) GetLroInput() *LROInput {
	if x != nil {
		return x.LroInput
	}
	return nil
}

type DataPumpImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdbName       string   `protobuf:"bytes,1,opt,name=pdb_name,json=pdbName,proto3" json:"pdb_name,omitempty"`
	DbDomain      string   `protobuf:"bytes,2,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
	CommandParams []string `protobuf:"bytes,3,rep,name=command_params,json=commandParams,proto3" json:"command_params,omitempty"`
	// GCS path to input dump file
	GcsPath string `protobuf:"bytes,4,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	// GCS path to output log file
	GcsLogPath string `protobuf:"bytes,5,opt,name=gcs_log_path,json=gcsLogPath,proto3" json:"gcs_log_path,omitempty"`
}

func (x *DataPumpImportRequest) Reset() {
	*x = DataPumpImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpImportRequest) ProtoMessage() {}

func (x *DataPumpImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpImportRequest.ProtoReflect.Descriptor instead.
func (*DataPumpImportRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{39}
}

func (x *DataPumpImportRequest) GetPdbName() string {
	if x != nil {
		return x.PdbName
	}
	return ""
}

func (x *DataPumpImportRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

func (x *DataPumpImportRequest) GetCommandParams() []string {
	if x != nil {
		return x.CommandParams
	}
	return nil
}

func (x *DataPumpImportRequest) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *DataPumpImportRequest) GetGcsLogPath() string {
	if x != nil {
		return x.GcsLogPath
	}
	return ""
}

type DataPumpImportAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequest *DataPumpImportRequest `protobuf:"bytes,1,opt,name=sync_request,json=syncRequest,proto3" json:"sync_request,omitempty"`
	LroInput    *LROInput              `protobuf:"bytes,2,opt,name=lro_input,json=lroInput,proto3" json:"lro_input,omitempty"`
}

func (x *DataPumpImportAsyncRequest) Reset() {
	*x = DataPumpImportAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpImportAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpImportAsyncRequest) ProtoMessage() {}

func (x *DataPumpImportAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpImportAsyncRequest.ProtoReflect.Descriptor instead.
func (*DataPumpImportAsyncRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{40}
}

func (x *DataPumpImportAsyncRequest) GetSyncRequest() *DataPumpImportRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *DataPumpImportAsyncRequest) GetLroInput() *LROInput {
	if x != nil {
		return x.LroInput
	}
	return nil
}

type DataPumpImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataPumpImportResponse) Reset() {
	*x = DataPumpImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpImportResponse) ProtoMessage() {}

func (x *DataPumpImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpImportResponse.ProtoReflect.Descriptor instead.
func (*DataPumpImportResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{41}
}

type DataPumpExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdbName       string   `protobuf:"bytes,1,opt,name=pdb_name,json=pdbName,proto3" json:"pdb_name,omitempty"`
	DbDomain      string   `protobuf:"bytes,2,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
	ObjectType    string   `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Objects       string   `protobuf:"bytes,4,opt,name=objects,proto3" json:"objects,omitempty"`
	CommandParams []string `protobuf:"bytes,5,rep,name=command_params,json=commandParams,proto3" json:"command_params,omitempty"`
	GcsPath       string   `protobuf:"bytes,6,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	GcsLogPath    string   `protobuf:"bytes,7,opt,name=gcs_log_path,json=gcsLogPath,proto3" json:"gcs_log_path,omitempty"`
	FlashbackTime string   `protobuf:"bytes,8,opt,name=flashback_time,json=flashbackTime,proto3" json:"flashback_time,omitempty"`
}

func (x *DataPumpExportRequest) Reset() {
	*x = DataPumpExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpExportRequest) ProtoMessage() {}

func (x *DataPumpExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpExportRequest.ProtoReflect.Descriptor instead.
func (*DataPumpExportRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{42}
}

func (x *DataPumpExportRequest) GetPdbName() string {
	if x != nil {
		return x.PdbName
	}
	return ""
}

func (x *DataPumpExportRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

func (x *DataPumpExportRequest) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *DataPumpExportRequest) GetObjects() string {
	if x != nil {
		return x.Objects
	}
	return ""
}

func (x *DataPumpExportRequest) GetCommandParams() []string {
	if x != nil {
		return x.CommandParams
	}
	return nil
}

func (x *DataPumpExportRequest) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *DataPumpExportRequest) GetGcsLogPath() string {
	if x != nil {
		return x.GcsLogPath
	}
	return ""
}

func (x *DataPumpExportRequest) GetFlashbackTime() string {
	if x != nil {
		return x.FlashbackTime
	}
	return ""
}

type DataPumpExportAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequest *DataPumpExportRequest `protobuf:"bytes,1,opt,name=sync_request,json=syncRequest,proto3" json:"sync_request,omitempty"`
	LroInput    *LROInput              `protobuf:"bytes,2,opt,name=lro_input,json=lroInput,proto3" json:"lro_input,omitempty"`
}

func (x *DataPumpExportAsyncRequest) Reset() {
	*x = DataPumpExportAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpExportAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpExportAsyncRequest) ProtoMessage() {}

func (x *DataPumpExportAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpExportAsyncRequest.ProtoReflect.Descriptor instead.
func (*DataPumpExportAsyncRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{43}
}

func (x *DataPumpExportAsyncRequest) GetSyncRequest() *DataPumpExportRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *DataPumpExportAsyncRequest) GetLroInput() *LROInput {
	if x != nil {
		return x.LroInput
	}
	return nil
}

type DataPumpExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataPumpExportResponse) Reset() {
	*x = DataPumpExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPumpExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPumpExportResponse) ProtoMessage() {}

func (x *DataPumpExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPumpExportResponse.ProtoReflect.Descriptor instead.
func (*DataPumpExportResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{44}
}

type RecoverConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdbName string `protobuf:"bytes,1,opt,name=cdbName,proto3" json:"cdbName,omitempty"`
}

func (x *RecoverConfigFileRequest) Reset() {
	*x = RecoverConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverConfigFileRequest) ProtoMessage() {}

func (x *RecoverConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverConfigFileRequest.ProtoReflect.Descriptor instead.
func (*RecoverConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{45}
}

func (x *RecoverConfigFileRequest) GetCdbName() string {
	if x != nil {
		return x.CdbName
	}
	return ""
}

type RecoverConfigFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecoverConfigFileResponse) Reset() {
	*x = RecoverConfigFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverConfigFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverConfigFileResponse) ProtoMessage() {}

func (x *RecoverConfigFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverConfigFileResponse.ProtoReflect.Descriptor instead.
func (*RecoverConfigFileResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{46}
}

type DownloadDirectoryFromGCSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcsPath               string `protobuf:"bytes,1,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
	LocalPath             string `protobuf:"bytes,2,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	AccessPermissionCheck bool   `protobuf:"varint,3,opt,name=access_permission_check,json=accessPermissionCheck,proto3" json:"access_permission_check,omitempty"`
}

func (x *DownloadDirectoryFromGCSRequest) Reset() {
	*x = DownloadDirectoryFromGCSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadDirectoryFromGCSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadDirectoryFromGCSRequest) ProtoMessage() {}

func (x *DownloadDirectoryFromGCSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadDirectoryFromGCSRequest.ProtoReflect.Descriptor instead.
func (*DownloadDirectoryFromGCSRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{47}
}

func (x *DownloadDirectoryFromGCSRequest) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

func (x *DownloadDirectoryFromGCSRequest) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *DownloadDirectoryFromGCSRequest) GetAccessPermissionCheck() bool {
	if x != nil {
		return x.AccessPermissionCheck
	}
	return false
}

type DownloadDirectoryFromGCSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DownloadDirectoryFromGCSResponse) Reset() {
	*x = DownloadDirectoryFromGCSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadDirectoryFromGCSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadDirectoryFromGCSResponse) ProtoMessage() {}

func (x *DownloadDirectoryFromGCSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadDirectoryFromGCSResponse.ProtoReflect.Descriptor instead.
func (*DownloadDirectoryFromGCSResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{48}
}

type FetchServiceImageMetaDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchServiceImageMetaDataRequest) Reset() {
	*x = FetchServiceImageMetaDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServiceImageMetaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServiceImageMetaDataRequest) ProtoMessage() {}

func (x *FetchServiceImageMetaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServiceImageMetaDataRequest.ProtoReflect.Descriptor instead.
func (*FetchServiceImageMetaDataRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{49}
}

type FetchServiceImageMetaDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CdbName    string `protobuf:"bytes,2,opt,name=cdb_name,json=cdbName,proto3" json:"cdb_name,omitempty"`
	OracleHome string `protobuf:"bytes,3,opt,name=oracle_home,json=oracleHome,proto3" json:"oracle_home,omitempty"`
}

func (x *FetchServiceImageMetaDataResponse) Reset() {
	*x = FetchServiceImageMetaDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServiceImageMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServiceImageMetaDataResponse) ProtoMessage() {}

func (x *FetchServiceImageMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServiceImageMetaDataResponse.ProtoReflect.Descriptor instead.
func (*FetchServiceImageMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{50}
}

func (x *FetchServiceImageMetaDataResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FetchServiceImageMetaDataResponse) GetCdbName() string {
	if x != nil {
		return x.CdbName
	}
	return ""
}

func (x *FetchServiceImageMetaDataResponse) GetOracleHome() string {
	if x != nil {
		return x.OracleHome
	}
	return ""
}

type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{51}
}

func (x *CreateFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{52}
}

type BootstrapDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdbName  string `protobuf:"bytes,1,opt,name=cdb_name,json=cdbName,proto3" json:"cdb_name,omitempty"`
	DbDomain string `protobuf:"bytes,2,opt,name=db_domain,json=dbDomain,proto3" json:"db_domain,omitempty"`
}

func (x *BootstrapDatabaseRequest) Reset() {
	*x = BootstrapDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapDatabaseRequest) ProtoMessage() {}

func (x *BootstrapDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapDatabaseRequest.ProtoReflect.Descriptor instead.
func (*BootstrapDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{53}
}

func (x *BootstrapDatabaseRequest) GetCdbName() string {
	if x != nil {
		return x.CdbName
	}
	return ""
}

func (x *BootstrapDatabaseRequest) GetDbDomain() string {
	if x != nil {
		return x.DbDomain
	}
	return ""
}

type BootstrapDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BootstrapDatabaseResponse) Reset() {
	*x = BootstrapDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapDatabaseResponse) ProtoMessage() {}

func (x *BootstrapDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapDatabaseResponse.ProtoReflect.Descriptor instead.
func (*BootstrapDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{54}
}

// FileInfo describes a file and is returned by Stat.
type ReadDirResponse_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size    int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mode    uint32                 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	ModTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modTime,proto3" json:"modTime,omitempty"`
	IsDir   bool                   `protobuf:"varint,5,opt,name=isDir,proto3" json:"isDir,omitempty"`
	AbsPath string                 `protobuf:"bytes,6,opt,name=absPath,proto3" json:"absPath,omitempty"`
}

func (x *ReadDirResponse_FileInfo) Reset() {
	*x = ReadDirResponse_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDirResponse_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse_FileInfo) ProtoMessage() {}

func (x *ReadDirResponse_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse_FileInfo.ProtoReflect.Descriptor instead.
func (*ReadDirResponse_FileInfo) Descriptor() ([]byte, []int) {
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ReadDirResponse_FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadDirResponse_FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ReadDirResponse_FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ReadDirResponse_FileInfo) GetModTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModTime
	}
	return nil
}

func (x *ReadDirResponse_FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *ReadDirResponse_FileInfo) GetAbsPath() string {
	if x != nil {
		return x.AbsPath
	}
	return ""
}

var File_oracle_pkg_agents_oracle_dbdaemon_proto protoreflect.FileDescriptor

var file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x64, 0x62, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x1a, 0x25, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0x13,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x43, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x3c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x43, 0x4d,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83,
	0x02, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x53, 0x51, 0x4c, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x4d, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6e, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x64, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x43, 0x64, 0x62, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x62, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79,
	0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x79, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x22,
	0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x03,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x44, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x65, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d,
	0x44, 0x62, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x44, 0x62, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x61, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61,
	0x44, 0x69, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x61,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x50, 0x44, 0x42, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x11, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x44, 0x42, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x64, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x64, 0x62, 0x73, 0x22,
	0xe5, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6e, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x2d, 0x0a, 0x08, 0x4c, 0x52, 0x4f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x52, 0x4d,
	0x41, 0x4e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x6c, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x4c, 0x52, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6c, 0x72,
	0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x0a, 0x4e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x4e, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xdd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x31, 0x32, 0x5f, 0x32, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x31, 0x32, 0x5f, 0x32, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x44, 0x42, 0x10, 0x02, 0x22,
	0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x1e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x44, 0x42, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x42, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4c, 0x52, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x08, 0x6c, 0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x62, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x16, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6e, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x6c, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x4c, 0x52, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6c, 0x72, 0x6f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x63, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x63, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4c, 0x52, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6c,
	0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x6d, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x95, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x63, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4c, 0x52, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6c,
	0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x34, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x63, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x0a, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x79, 0x0a, 0x21, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x22, 0x41, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x62, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb8, 0x18, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x52, 0x75, 0x6e, 0x53, 0x51, 0x4c, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x53,
	0x51, 0x4c, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x53, 0x51, 0x4c, 0x50, 0x6c, 0x75, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x51, 0x4c, 0x50, 0x6c, 0x75,
	0x73, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x4d, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x44, 0x42, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x44, 0x42,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x44,
	0x42, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x75,
	0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x12, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4d, 0x41, 0x4e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x03, 0x4e, 0x49, 0x44, 0x12, 0x19,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4e, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x28, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x2e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e,
	0x69, 0x74, 0x4f, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6f, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x44, 0x42, 0x12, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x42, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x42, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x44, 0x42, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x44, 0x42, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x2a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x29, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x6d, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x6d, 0x70,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x29, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x75, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x66, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43,
	0x53, 0x12, 0x2e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x6c, 0x63, 0x61, 0x72, 0x72, 0x6f, 0x2d, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x3b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescOnce sync.Once
	file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescData = file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDesc
)

func file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescGZIP() []byte {
	file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescOnce.Do(func() {
		file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescData)
	})
	return file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDescData
}

var file_oracle_pkg_agents_oracle_dbdaemon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_oracle_pkg_agents_oracle_dbdaemon_proto_goTypes = []interface{}{
	(GetDatabaseTypeResponse_DatabaseType)(0),  // 0: agents.oracle.GetDatabaseTypeResponse.DatabaseType
	(*CreateDirRequest)(nil),                   // 1: agents.oracle.CreateDirRequest
	(*CreateDirResponse)(nil),                  // 2: agents.oracle.CreateDirResponse
	(*ReadDirRequest)(nil),                     // 3: agents.oracle.ReadDirRequest
	(*ReadDirResponse)(nil),                    // 4: agents.oracle.ReadDirResponse
	(*DeleteDirRequest)(nil),                   // 5: agents.oracle.DeleteDirRequest
	(*DeleteDirResponse)(nil),                  // 6: agents.oracle.DeleteDirResponse
	(*RunCMDResponse)(nil),                     // 7: agents.oracle.RunCMDResponse
	(*LocalConnection)(nil),                    // 8: agents.oracle.LocalConnection
	(*RunSQLPlusCMDRequest)(nil),               // 9: agents.oracle.RunSQLPlusCMDRequest
	(*CheckDatabaseStateRequest)(nil),          // 10: agents.oracle.CheckDatabaseStateRequest
	(*CheckDatabaseStateResponse)(nil),         // 11: agents.oracle.CheckDatabaseStateResponse
	(*CreatePasswordFileRequest)(nil),          // 12: agents.oracle.CreatePasswordFileRequest
	(*CreatePasswordFileResponse)(nil),         // 13: agents.oracle.CreatePasswordFileResponse
	(*CreateReplicaInitOraFileRequest)(nil),    // 14: agents.oracle.CreateReplicaInitOraFileRequest
	(*CreateReplicaInitOraFileResponse)(nil),   // 15: agents.oracle.CreateReplicaInitOraFileResponse
	(*KnownPDBsRequest)(nil),                   // 16: agents.oracle.KnownPDBsRequest
	(*KnownPDBsResponse)(nil),                  // 17: agents.oracle.KnownPDBsResponse
	(*RunRMANRequest)(nil),                     // 18: agents.oracle.RunRMANRequest
	(*LROInput)(nil),                           // 19: agents.oracle.LROInput
	(*RunRMANAsyncRequest)(nil),                // 20: agents.oracle.RunRMANAsyncRequest
	(*RunRMANResponse)(nil),                    // 21: agents.oracle.RunRMANResponse
	(*NIDRequest)(nil),                         // 22: agents.oracle.NIDRequest
	(*NIDResponse)(nil),                        // 23: agents.oracle.NIDResponse
	(*GetDatabaseTypeRequest)(nil),             // 24: agents.oracle.GetDatabaseTypeRequest
	(*GetDatabaseTypeResponse)(nil),            // 25: agents.oracle.GetDatabaseTypeResponse
	(*GetDatabaseNameRequest)(nil),             // 26: agents.oracle.GetDatabaseNameRequest
	(*GetDatabaseNameResponse)(nil),            // 27: agents.oracle.GetDatabaseNameResponse
	(*SetListenerRegistrationRequest)(nil),     // 28: agents.oracle.SetListenerRegistrationRequest
	(*BootstrapStandbyRequest)(nil),            // 29: agents.oracle.BootstrapStandbyRequest
	(*BootstrapStandbyResponse)(nil),           // 30: agents.oracle.BootstrapStandbyResponse
	(*CreateCDBRequest)(nil),                   // 31: agents.oracle.CreateCDBRequest
	(*CreateCDBAsyncRequest)(nil),              // 32: agents.oracle.CreateCDBAsyncRequest
	(*CreateCDBResponse)(nil),                  // 33: agents.oracle.CreateCDBResponse
	(*CreateListenerRequest)(nil),              // 34: agents.oracle.CreateListenerRequest
	(*CreateListenerResponse)(nil),             // 35: agents.oracle.CreateListenerResponse
	(*FileExistsRequest)(nil),                  // 36: agents.oracle.FileExistsRequest
	(*FileExistsResponse)(nil),                 // 37: agents.oracle.FileExistsResponse
	(*PhysicalRestoreRequest)(nil),             // 38: agents.oracle.PhysicalRestoreRequest
	(*PhysicalRestoreAsyncRequest)(nil),        // 39: agents.oracle.PhysicalRestoreAsyncRequest
	(*DataPumpImportRequest)(nil),              // 40: agents.oracle.DataPumpImportRequest
	(*DataPumpImportAsyncRequest)(nil),         // 41: agents.oracle.DataPumpImportAsyncRequest
	(*DataPumpImportResponse)(nil),             // 42: agents.oracle.DataPumpImportResponse
	(*DataPumpExportRequest)(nil),              // 43: agents.oracle.DataPumpExportRequest
	(*DataPumpExportAsyncRequest)(nil),         // 44: agents.oracle.DataPumpExportAsyncRequest
	(*DataPumpExportResponse)(nil),             // 45: agents.oracle.DataPumpExportResponse
	(*RecoverConfigFileRequest)(nil),           // 46: agents.oracle.RecoverConfigFileRequest
	(*RecoverConfigFileResponse)(nil),          // 47: agents.oracle.RecoverConfigFileResponse
	(*DownloadDirectoryFromGCSRequest)(nil),    // 48: agents.oracle.DownloadDirectoryFromGCSRequest
	(*DownloadDirectoryFromGCSResponse)(nil),   // 49: agents.oracle.DownloadDirectoryFromGCSResponse
	(*FetchServiceImageMetaDataRequest)(nil),   // 50: agents.oracle.FetchServiceImageMetaDataRequest
	(*FetchServiceImageMetaDataResponse)(nil),  // 51: agents.oracle.FetchServiceImageMetaDataResponse
	(*CreateFileRequest)(nil),                  // 52: agents.oracle.CreateFileRequest
	(*CreateFileResponse)(nil),                 // 53: agents.oracle.CreateFileResponse
	(*BootstrapDatabaseRequest)(nil),           // 54: agents.oracle.BootstrapDatabaseRequest
	(*BootstrapDatabaseResponse)(nil),          // 55: agents.oracle.BootstrapDatabaseResponse
	(*ReadDirResponse_FileInfo)(nil),           // 56: agents.oracle.ReadDirResponse.FileInfo
	(*timestamppb.Timestamp)(nil),              // 57: google.protobuf.Timestamp
	(*BounceDatabaseRequest)(nil),              // 58: agents.oracle.BounceDatabaseRequest
	(*BounceListenerRequest)(nil),              // 59: agents.oracle.BounceListenerRequest
	(*longrunning.ListOperationsRequest)(nil),  // 60: google.longrunning.ListOperationsRequest
	(*longrunning.GetOperationRequest)(nil),    // 61: google.longrunning.GetOperationRequest
	(*longrunning.DeleteOperationRequest)(nil), // 62: google.longrunning.DeleteOperationRequest
	(*BounceDatabaseResponse)(nil),             // 63: agents.oracle.BounceDatabaseResponse
	(*BounceListenerResponse)(nil),             // 64: agents.oracle.BounceListenerResponse
	(*longrunning.Operation)(nil),              // 65: google.longrunning.Operation
	(*longrunning.ListOperationsResponse)(nil), // 66: google.longrunning.ListOperationsResponse
	(*emptypb.Empty)(nil),                      // 67: google.protobuf.Empty
}
var file_oracle_pkg_agents_oracle_dbdaemon_proto_depIdxs = []int32{
	56, // 0: agents.oracle.ReadDirResponse.currPath:type_name -> agents.oracle.ReadDirResponse.FileInfo
	56, // 1: agents.oracle.ReadDirResponse.subPaths:type_name -> agents.oracle.ReadDirResponse.FileInfo
	8,  // 2: agents.oracle.RunSQLPlusCMDRequest.local:type_name -> agents.oracle.LocalConnection
	18, // 3: agents.oracle.RunRMANAsyncRequest.sync_request:type_name -> agents.oracle.RunRMANRequest
	19, // 4: agents.oracle.RunRMANAsyncRequest.lro_input:type_name -> agents.oracle.LROInput
	0,  // 5: agents.oracle.GetDatabaseTypeResponse.database_type:type_name -> agents.oracle.GetDatabaseTypeResponse.DatabaseType
	31, // 6: agents.oracle.CreateCDBAsyncRequest.sync_request:type_name -> agents.oracle.CreateCDBRequest
	19, // 7: agents.oracle.CreateCDBAsyncRequest.lro_input:type_name -> agents.oracle.LROInput
	38, // 8: agents.oracle.PhysicalRestoreAsyncRequest.sync_request:type_name -> agents.oracle.PhysicalRestoreRequest
	19, // 9: agents.oracle.PhysicalRestoreAsyncRequest.lro_input:type_name -> agents.oracle.LROInput
	40, // 10: agents.oracle.DataPumpImportAsyncRequest.sync_request:type_name -> agents.oracle.DataPumpImportRequest
	19, // 11: agents.oracle.DataPumpImportAsyncRequest.lro_input:type_name -> agents.oracle.LROInput
	43, // 12: agents.oracle.DataPumpExportAsyncRequest.sync_request:type_name -> agents.oracle.DataPumpExportRequest
	19, // 13: agents.oracle.DataPumpExportAsyncRequest.lro_input:type_name -> agents.oracle.LROInput
	57, // 14: agents.oracle.ReadDirResponse.FileInfo.modTime:type_name -> google.protobuf.Timestamp
	1,  // 15: agents.oracle.DatabaseDaemon.CreateDir:input_type -> agents.oracle.CreateDirRequest
	3,  // 16: agents.oracle.DatabaseDaemon.ReadDir:input_type -> agents.oracle.ReadDirRequest
	5,  // 17: agents.oracle.DatabaseDaemon.DeleteDir:input_type -> agents.oracle.DeleteDirRequest
	58, // 18: agents.oracle.DatabaseDaemon.BounceDatabase:input_type -> agents.oracle.BounceDatabaseRequest
	59, // 19: agents.oracle.DatabaseDaemon.BounceListener:input_type -> agents.oracle.BounceListenerRequest
	10, // 20: agents.oracle.DatabaseDaemon.CheckDatabaseState:input_type -> agents.oracle.CheckDatabaseStateRequest
	9,  // 21: agents.oracle.DatabaseDaemon.RunSQLPlus:input_type -> agents.oracle.RunSQLPlusCMDRequest
	9,  // 22: agents.oracle.DatabaseDaemon.RunSQLPlusFormatted:input_type -> agents.oracle.RunSQLPlusCMDRequest
	16, // 23: agents.oracle.DatabaseDaemon.KnownPDBs:input_type -> agents.oracle.KnownPDBsRequest
	18, // 24: agents.oracle.DatabaseDaemon.RunRMAN:input_type -> agents.oracle.RunRMANRequest
	20, // 25: agents.oracle.DatabaseDaemon.RunRMANAsync:input_type -> agents.oracle.RunRMANAsyncRequest
	22, // 26: agents.oracle.DatabaseDaemon.NID:input_type -> agents.oracle.NIDRequest
	24, // 27: agents.oracle.DatabaseDaemon.GetDatabaseType:input_type -> agents.oracle.GetDatabaseTypeRequest
	26, // 28: agents.oracle.DatabaseDaemon.GetDatabaseName:input_type -> agents.oracle.GetDatabaseNameRequest
	12, // 29: agents.oracle.DatabaseDaemon.CreatePasswordFile:input_type -> agents.oracle.CreatePasswordFileRequest
	14, // 30: agents.oracle.DatabaseDaemon.CreateReplicaInitOraFile:input_type -> agents.oracle.CreateReplicaInitOraFileRequest
	28, // 31: agents.oracle.DatabaseDaemon.SetListenerRegistration:input_type -> agents.oracle.SetListenerRegistrationRequest
	29, // 32: agents.oracle.DatabaseDaemon.BootstrapStandby:input_type -> agents.oracle.BootstrapStandbyRequest
	31, // 33: agents.oracle.DatabaseDaemon.CreateCDB:input_type -> agents.oracle.CreateCDBRequest
	32, // 34: agents.oracle.DatabaseDaemon.CreateCDBAsync:input_type -> agents.oracle.CreateCDBAsyncRequest
	34, // 35: agents.oracle.DatabaseDaemon.CreateListener:input_type -> agents.oracle.CreateListenerRequest
	36, // 36: agents.oracle.DatabaseDaemon.FileExists:input_type -> agents.oracle.FileExistsRequest
	39, // 37: agents.oracle.DatabaseDaemon.PhysicalRestoreAsync:input_type -> agents.oracle.PhysicalRestoreAsyncRequest
	41, // 38: agents.oracle.DatabaseDaemon.DataPumpImportAsync:input_type -> agents.oracle.DataPumpImportAsyncRequest
	44, // 39: agents.oracle.DatabaseDaemon.DataPumpExportAsync:input_type -> agents.oracle.DataPumpExportAsyncRequest
	60, // 40: agents.oracle.DatabaseDaemon.ListOperations:input_type -> google.longrunning.ListOperationsRequest
	61, // 41: agents.oracle.DatabaseDaemon.GetOperation:input_type -> google.longrunning.GetOperationRequest
	62, // 42: agents.oracle.DatabaseDaemon.DeleteOperation:input_type -> google.longrunning.DeleteOperationRequest
	46, // 43: agents.oracle.DatabaseDaemon.RecoverConfigFile:input_type -> agents.oracle.RecoverConfigFileRequest
	48, // 44: agents.oracle.DatabaseDaemon.DownloadDirectoryFromGCS:input_type -> agents.oracle.DownloadDirectoryFromGCSRequest
	50, // 45: agents.oracle.DatabaseDaemon.FetchServiceImageMetaData:input_type -> agents.oracle.FetchServiceImageMetaDataRequest
	52, // 46: agents.oracle.DatabaseDaemon.CreateFile:input_type -> agents.oracle.CreateFileRequest
	54, // 47: agents.oracle.DatabaseDaemon.BootstrapDatabase:input_type -> agents.oracle.BootstrapDatabaseRequest
	2,  // 48: agents.oracle.DatabaseDaemon.CreateDir:output_type -> agents.oracle.CreateDirResponse
	4,  // 49: agents.oracle.DatabaseDaemon.ReadDir:output_type -> agents.oracle.ReadDirResponse
	6,  // 50: agents.oracle.DatabaseDaemon.DeleteDir:output_type -> agents.oracle.DeleteDirResponse
	63, // 51: agents.oracle.DatabaseDaemon.BounceDatabase:output_type -> agents.oracle.BounceDatabaseResponse
	64, // 52: agents.oracle.DatabaseDaemon.BounceListener:output_type -> agents.oracle.BounceListenerResponse
	11, // 53: agents.oracle.DatabaseDaemon.CheckDatabaseState:output_type -> agents.oracle.CheckDatabaseStateResponse
	7,  // 54: agents.oracle.DatabaseDaemon.RunSQLPlus:output_type -> agents.oracle.RunCMDResponse
	7,  // 55: agents.oracle.DatabaseDaemon.RunSQLPlusFormatted:output_type -> agents.oracle.RunCMDResponse
	17, // 56: agents.oracle.DatabaseDaemon.KnownPDBs:output_type -> agents.oracle.KnownPDBsResponse
	21, // 57: agents.oracle.DatabaseDaemon.RunRMAN:output_type -> agents.oracle.RunRMANResponse
	65, // 58: agents.oracle.DatabaseDaemon.RunRMANAsync:output_type -> google.longrunning.Operation
	23, // 59: agents.oracle.DatabaseDaemon.NID:output_type -> agents.oracle.NIDResponse
	25, // 60: agents.oracle.DatabaseDaemon.GetDatabaseType:output_type -> agents.oracle.GetDatabaseTypeResponse
	27, // 61: agents.oracle.DatabaseDaemon.GetDatabaseName:output_type -> agents.oracle.GetDatabaseNameResponse
	13, // 62: agents.oracle.DatabaseDaemon.CreatePasswordFile:output_type -> agents.oracle.CreatePasswordFileResponse
	15, // 63: agents.oracle.DatabaseDaemon.CreateReplicaInitOraFile:output_type -> agents.oracle.CreateReplicaInitOraFileResponse
	64, // 64: agents.oracle.DatabaseDaemon.SetListenerRegistration:output_type -> agents.oracle.BounceListenerResponse
	30, // 65: agents.oracle.DatabaseDaemon.BootstrapStandby:output_type -> agents.oracle.BootstrapStandbyResponse
	33, // 66: agents.oracle.DatabaseDaemon.CreateCDB:output_type -> agents.oracle.CreateCDBResponse
	65, // 67: agents.oracle.DatabaseDaemon.CreateCDBAsync:output_type -> google.longrunning.Operation
	35, // 68: agents.oracle.DatabaseDaemon.CreateListener:output_type -> agents.oracle.CreateListenerResponse
	37, // 69: agents.oracle.DatabaseDaemon.FileExists:output_type -> agents.oracle.FileExistsResponse
	65, // 70: agents.oracle.DatabaseDaemon.PhysicalRestoreAsync:output_type -> google.longrunning.Operation
	65, // 71: agents.oracle.DatabaseDaemon.DataPumpImportAsync:output_type -> google.longrunning.Operation
	65, // 72: agents.oracle.DatabaseDaemon.DataPumpExportAsync:output_type -> google.longrunning.Operation
	66, // 73: agents.oracle.DatabaseDaemon.ListOperations:output_type -> google.longrunning.ListOperationsResponse
	65, // 74: agents.oracle.DatabaseDaemon.GetOperation:output_type -> google.longrunning.Operation
	67, // 75: agents.oracle.DatabaseDaemon.DeleteOperation:output_type -> google.protobuf.Empty
	47, // 76: agents.oracle.DatabaseDaemon.RecoverConfigFile:output_type -> agents.oracle.RecoverConfigFileResponse
	49, // 77: agents.oracle.DatabaseDaemon.DownloadDirectoryFromGCS:output_type -> agents.oracle.DownloadDirectoryFromGCSResponse
	51, // 78: agents.oracle.DatabaseDaemon.FetchServiceImageMetaData:output_type -> agents.oracle.FetchServiceImageMetaDataResponse
	53, // 79: agents.oracle.DatabaseDaemon.CreateFile:output_type -> agents.oracle.CreateFileResponse
	55, // 80: agents.oracle.DatabaseDaemon.BootstrapDatabase:output_type -> agents.oracle.BootstrapDatabaseResponse
	48, // [48:81] is the sub-list for method output_type
	15, // [15:48] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_oracle_pkg_agents_oracle_dbdaemon_proto_init() }
func file_oracle_pkg_agents_oracle_dbdaemon_proto_init() {
	if File_oracle_pkg_agents_oracle_dbdaemon_proto != nil {
		return
	}
	file_oracle_pkg_agents_oracle_oracle_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCMDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSQLPlusCMDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDatabaseStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDatabaseStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePasswordFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePasswordFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaInitOraFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaInitOraFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnownPDBsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnownPDBsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRMANRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LROInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRMANAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRMANResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatabaseTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatabaseTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatabaseNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatabaseNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetListenerRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapStandbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapStandbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDBAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateListenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateListenerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalRestoreAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpImportAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpExportAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPumpExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverConfigFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadDirectoryFromGCSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadDirectoryFromGCSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServiceImageMetaDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServiceImageMetaDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDirResponse_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RunSQLPlusCMDRequest_Local)(nil),
		(*RunSQLPlusCMDRequest_Dsn)(nil),
		(*RunSQLPlusCMDRequest_DatabaseName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_oracle_pkg_agents_oracle_dbdaemon_proto_goTypes,
		DependencyIndexes: file_oracle_pkg_agents_oracle_dbdaemon_proto_depIdxs,
		EnumInfos:         file_oracle_pkg_agents_oracle_dbdaemon_proto_enumTypes,
		MessageInfos:      file_oracle_pkg_agents_oracle_dbdaemon_proto_msgTypes,
	}.Build()
	File_oracle_pkg_agents_oracle_dbdaemon_proto = out.File
	file_oracle_pkg_agents_oracle_dbdaemon_proto_rawDesc = nil
	file_oracle_pkg_agents_oracle_dbdaemon_proto_goTypes = nil
	file_oracle_pkg_agents_oracle_dbdaemon_proto_depIdxs = nil
}
