// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseDaemonProxyClient is the client API for DatabaseDaemonProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseDaemonProxyClient interface {
	// BounceDatabase RPC call to start/stop a database.
	BounceDatabase(ctx context.Context, in *BounceDatabaseRequest, opts ...grpc.CallOption) (*BounceDatabaseResponse, error)
	// BounceListener RPC call to start/stop a listener.
	BounceListener(ctx context.Context, in *BounceListenerRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error)
	// ProxyRunDbca execute the dbca command with the given parameters
	ProxyRunDbca(ctx context.Context, in *ProxyRunDbcaRequest, opts ...grpc.CallOption) (*ProxyRunDbcaResponse, error)
	// ProxyRunNID RPC call executes database rename operations
	ProxyRunNID(ctx context.Context, in *ProxyRunNIDRequest, opts ...grpc.CallOption) (*ProxyRunNIDResponse, error)
	// SetEnv RPC call moves/relinks oracle config files within oracledb container
	SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*SetEnvResponse, error)
	// ProxyRunInitOracle RPC call exec init_oracle binary with specified params
	ProxyRunInitOracle(ctx context.Context, in *ProxyRunInitOracleRequest, opts ...grpc.CallOption) (*ProxyRunInitOracleResponse, error)
	// ProxyFetchServiceImageMetaData returns metadata from the oracledb container
	ProxyFetchServiceImageMetaData(ctx context.Context, in *ProxyFetchServiceImageMetaDataRequest, opts ...grpc.CallOption) (*ProxyFetchServiceImageMetaDataResponse, error)
	// SetDnfsState set dNFS state
	SetDnfsState(ctx context.Context, in *SetDnfsStateRequest, opts ...grpc.CallOption) (*SetDnfsStateResponse, error)
}

type databaseDaemonProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseDaemonProxyClient(cc grpc.ClientConnInterface) DatabaseDaemonProxyClient {
	return &databaseDaemonProxyClient{cc}
}

func (c *databaseDaemonProxyClient) BounceDatabase(ctx context.Context, in *BounceDatabaseRequest, opts ...grpc.CallOption) (*BounceDatabaseResponse, error) {
	out := new(BounceDatabaseResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/BounceDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) BounceListener(ctx context.Context, in *BounceListenerRequest, opts ...grpc.CallOption) (*BounceListenerResponse, error) {
	out := new(BounceListenerResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/BounceListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) ProxyRunDbca(ctx context.Context, in *ProxyRunDbcaRequest, opts ...grpc.CallOption) (*ProxyRunDbcaResponse, error) {
	out := new(ProxyRunDbcaResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/ProxyRunDbca", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) ProxyRunNID(ctx context.Context, in *ProxyRunNIDRequest, opts ...grpc.CallOption) (*ProxyRunNIDResponse, error) {
	out := new(ProxyRunNIDResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/ProxyRunNID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*SetEnvResponse, error) {
	out := new(SetEnvResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/SetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) ProxyRunInitOracle(ctx context.Context, in *ProxyRunInitOracleRequest, opts ...grpc.CallOption) (*ProxyRunInitOracleResponse, error) {
	out := new(ProxyRunInitOracleResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/ProxyRunInitOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) ProxyFetchServiceImageMetaData(ctx context.Context, in *ProxyFetchServiceImageMetaDataRequest, opts ...grpc.CallOption) (*ProxyFetchServiceImageMetaDataResponse, error) {
	out := new(ProxyFetchServiceImageMetaDataResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/ProxyFetchServiceImageMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseDaemonProxyClient) SetDnfsState(ctx context.Context, in *SetDnfsStateRequest, opts ...grpc.CallOption) (*SetDnfsStateResponse, error) {
	out := new(SetDnfsStateResponse)
	err := c.cc.Invoke(ctx, "/agents.oracle.DatabaseDaemonProxy/SetDnfsState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseDaemonProxyServer is the server API for DatabaseDaemonProxy service.
// All implementations must embed UnimplementedDatabaseDaemonProxyServer
// for forward compatibility
type DatabaseDaemonProxyServer interface {
	// BounceDatabase RPC call to start/stop a database.
	BounceDatabase(context.Context, *BounceDatabaseRequest) (*BounceDatabaseResponse, error)
	// BounceListener RPC call to start/stop a listener.
	BounceListener(context.Context, *BounceListenerRequest) (*BounceListenerResponse, error)
	// ProxyRunDbca execute the dbca command with the given parameters
	ProxyRunDbca(context.Context, *ProxyRunDbcaRequest) (*ProxyRunDbcaResponse, error)
	// ProxyRunNID RPC call executes database rename operations
	ProxyRunNID(context.Context, *ProxyRunNIDRequest) (*ProxyRunNIDResponse, error)
	// SetEnv RPC call moves/relinks oracle config files within oracledb container
	SetEnv(context.Context, *SetEnvRequest) (*SetEnvResponse, error)
	// ProxyRunInitOracle RPC call exec init_oracle binary with specified params
	ProxyRunInitOracle(context.Context, *ProxyRunInitOracleRequest) (*ProxyRunInitOracleResponse, error)
	// ProxyFetchServiceImageMetaData returns metadata from the oracledb container
	ProxyFetchServiceImageMetaData(context.Context, *ProxyFetchServiceImageMetaDataRequest) (*ProxyFetchServiceImageMetaDataResponse, error)
	// SetDnfsState set dNFS state
	SetDnfsState(context.Context, *SetDnfsStateRequest) (*SetDnfsStateResponse, error)
	mustEmbedUnimplementedDatabaseDaemonProxyServer()
}

// UnimplementedDatabaseDaemonProxyServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseDaemonProxyServer struct {
}

func (UnimplementedDatabaseDaemonProxyServer) BounceDatabase(context.Context, *BounceDatabaseRequest) (*BounceDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BounceDatabase not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) BounceListener(context.Context, *BounceListenerRequest) (*BounceListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BounceListener not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) ProxyRunDbca(context.Context, *ProxyRunDbcaRequest) (*ProxyRunDbcaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRunDbca not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) ProxyRunNID(context.Context, *ProxyRunNIDRequest) (*ProxyRunNIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRunNID not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) SetEnv(context.Context, *SetEnvRequest) (*SetEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) ProxyRunInitOracle(context.Context, *ProxyRunInitOracleRequest) (*ProxyRunInitOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRunInitOracle not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) ProxyFetchServiceImageMetaData(context.Context, *ProxyFetchServiceImageMetaDataRequest) (*ProxyFetchServiceImageMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyFetchServiceImageMetaData not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) SetDnfsState(context.Context, *SetDnfsStateRequest) (*SetDnfsStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDnfsState not implemented")
}
func (UnimplementedDatabaseDaemonProxyServer) mustEmbedUnimplementedDatabaseDaemonProxyServer() {}

// UnsafeDatabaseDaemonProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseDaemonProxyServer will
// result in compilation errors.
type UnsafeDatabaseDaemonProxyServer interface {
	mustEmbedUnimplementedDatabaseDaemonProxyServer()
}

func RegisterDatabaseDaemonProxyServer(s grpc.ServiceRegistrar, srv DatabaseDaemonProxyServer) {
	s.RegisterService(&DatabaseDaemonProxy_ServiceDesc, srv)
}

func _DatabaseDaemonProxy_BounceDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BounceDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).BounceDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/BounceDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).BounceDatabase(ctx, req.(*BounceDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_BounceListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BounceListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).BounceListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/BounceListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).BounceListener(ctx, req.(*BounceListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_ProxyRunDbca_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRunDbcaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).ProxyRunDbca(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/ProxyRunDbca",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).ProxyRunDbca(ctx, req.(*ProxyRunDbcaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_ProxyRunNID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRunNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).ProxyRunNID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/ProxyRunNID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).ProxyRunNID(ctx, req.(*ProxyRunNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/SetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).SetEnv(ctx, req.(*SetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_ProxyRunInitOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRunInitOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).ProxyRunInitOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/ProxyRunInitOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).ProxyRunInitOracle(ctx, req.(*ProxyRunInitOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_ProxyFetchServiceImageMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyFetchServiceImageMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).ProxyFetchServiceImageMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/ProxyFetchServiceImageMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).ProxyFetchServiceImageMetaData(ctx, req.(*ProxyFetchServiceImageMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseDaemonProxy_SetDnfsState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDnfsStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseDaemonProxyServer).SetDnfsState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents.oracle.DatabaseDaemonProxy/SetDnfsState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseDaemonProxyServer).SetDnfsState(ctx, req.(*SetDnfsStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseDaemonProxy_ServiceDesc is the grpc.ServiceDesc for DatabaseDaemonProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseDaemonProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agents.oracle.DatabaseDaemonProxy",
	HandlerType: (*DatabaseDaemonProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BounceDatabase",
			Handler:    _DatabaseDaemonProxy_BounceDatabase_Handler,
		},
		{
			MethodName: "BounceListener",
			Handler:    _DatabaseDaemonProxy_BounceListener_Handler,
		},
		{
			MethodName: "ProxyRunDbca",
			Handler:    _DatabaseDaemonProxy_ProxyRunDbca_Handler,
		},
		{
			MethodName: "ProxyRunNID",
			Handler:    _DatabaseDaemonProxy_ProxyRunNID_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _DatabaseDaemonProxy_SetEnv_Handler,
		},
		{
			MethodName: "ProxyRunInitOracle",
			Handler:    _DatabaseDaemonProxy_ProxyRunInitOracle_Handler,
		},
		{
			MethodName: "ProxyFetchServiceImageMetaData",
			Handler:    _DatabaseDaemonProxy_ProxyFetchServiceImageMetaData_Handler,
		},
		{
			MethodName: "SetDnfsState",
			Handler:    _DatabaseDaemonProxy_SetDnfsState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/pkg/agents/oracle/dbdaemon_proxy.proto",
}
